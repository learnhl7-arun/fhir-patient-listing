<channel version="4.3.0">
  <id>aedc7e38-f954-4329-8641-567d1dd21e72</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>CSV to Patient Resource</name>
  <description></description>
  <revision>14</revision>
  <sourceConnector version="4.3.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.3.0">
      <pluginProperties/>
      <pollConnectorProperties version="4.3.0">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="4.3.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>true</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>FILE</scheme>
      <host>${fhir_csv_dir}/in</host>
      <fileFilter>*.csv</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>true</anonymous>
      <username>anonymous</username>
      <password>anonymous</password>
      <timeout>10000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>MOVE</afterProcessingAction>
      <moveToDirectory>${fhir_csv_dir}/processed</moveToDirectory>
      <moveToFileName>${originalFilename}</moveToFileName>
      <errorReadingAction>NONE</errorReadingAction>
      <errorResponseAction>MOVE</errorResponseAction>
      <errorMoveToDirectory>${fhir_csv_dir}/z_error</errorMoveToDirectory>
      <errorMoveToFileName>${originalFilename}</errorMoveToFileName>
      <checkFileAge>true</checkFileAge>
      <fileAge>1000</fileAge>
      <fileSizeMinimum>0</fileSizeMinimum>
      <fileSizeMaximum></fileSizeMaximum>
      <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="4.3.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.3.0">
          <name>Map CSV to FHIR JSON</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>//Prefix Number with zeroes so that the length will be 4
var strNumber = msg[&apos;row1&apos;][&apos;Number&apos;].toString()
var intNumber = parseFloat(strNumber);

// For 1 to 9 prefix THREE ZEROES
if(intNumber &lt; 10) {
	strNumber = &apos;000&apos; + strNumber;
}
// For 10 to 99 prefix TWO ZEROES
else if (intNumber &lt; 100){
	strNumber = &apos;00&apos; + strNumber;
}
// For 100 to 999 prefix ONE ZERO
else if (intNumber &lt; 1000){
	strNumber = &apos;0&apos; + strNumber;
}
channelMap.put(&apos;strNumber&apos;,strNumber);


// First instance of Patient.identifier is MRN
tmp[&apos;identifier&apos;][0][&apos;value&apos;] = &quot;MRN-&quot; + strNumber;

// Second instance of Patient.identifier is Social Security Number
tmp[&apos;identifier&apos;][1][&apos;value&apos;] = msg[&apos;row1&apos;][&apos;NationalID&apos;].toString();

/* --- Patient Name --- */
	//Title &gt;&gt; Prefix
	tmp[&apos;name&apos;][0][&apos;prefix&apos;][0] = msg[&apos;row1&apos;][&apos;Title&apos;].toString();
	
	//Surname &gt;&gt; Family Name 
	tmp[&apos;name&apos;][0][&apos;family&apos;] = msg[&apos;row1&apos;][&apos;Surname&apos;].toString();
	
	//GivenName &gt;&gt; GivenName first instance
	tmp[&apos;name&apos;][0][&apos;given&apos;][0] = msg[&apos;row1&apos;][&apos;GivenName&apos;].toString();
	
	//MiddleInital &gt;&gt; GivenName second instance
	tmp[&apos;name&apos;][0][&apos;given&apos;][1] = msg[&apos;row1&apos;][&apos;MiddleInitial&apos;].toString();

//Patient.Gender
tmp[&apos;gender&apos;] = msg[&apos;row1&apos;][&apos;Gender&apos;].toString();


//Patient.birthDate
var csv_Birthday = msg[&apos;row1&apos;][&apos;Birthday&apos;].toString();
tmp[&apos;birthDate&apos;] = DateUtil.convertDate(&apos;m/d/yyyy&apos;, &apos;yyyy-mm-dd&apos;, csv_Birthday);


/* --- Patient Address --- */
	//StreeAddress &gt;&gt; line
	tmp[&apos;address&apos;][0][&apos;line&apos;][0] = msg[&apos;row1&apos;][&apos;StreetAddress&apos;].toString();

	//City &gt;&gt; city
	tmp[&apos;address&apos;][0][&apos;city&apos;] = msg[&apos;row1&apos;][&apos;City&apos;].toString();

	//ZipCode &gt;&gt; postalCode
	tmp[&apos;address&apos;][0][&apos;postalCode&apos;] = msg[&apos;row1&apos;][&apos;ZipCode&apos;].toString();
	
	//StateFull &gt;&gt; state
	tmp[&apos;address&apos;][0][&apos;state&apos;] = msg[&apos;row1&apos;][&apos;StateFull&apos;].toString();
	
	//CountryFull &gt;&gt; country
	tmp[&apos;address&apos;][0][&apos;country&apos;] = msg[&apos;row1&apos;][&apos;CountryFull&apos;].toString();

/* --- Patient Telecom --- */
	//First instance is Email 
	var csv_email = msg[&apos;row1&apos;][&apos;EmailAddress&apos;].toString();
	tmp[&apos;telecom&apos;][0][&apos;value&apos;] = csv_email.toLowerCase();
	
	//Second instance is Mobile
	tmp[&apos;telecom&apos;][1][&apos;value&apos;] = msg[&apos;row1&apos;][&apos;TelephoneNumber&apos;].toString();


// Mother&apos;s Maiden Name
tmp[&apos;extension&apos;][0][&apos;valueString&apos;] = msg[&apos;row1&apos;][&apos;MothersMaiden&apos;].toString();</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64">MSxtYWxlLEFtZXJpY2FuLE1yLixQaGlsbGlwLFMsU2h5LCI0ODkgUGVjayBDb3VydCIsIkVsIFRvcm8iLENBLENhbGlmb3JuaWEsOTI2MzAsVVMsIlVuaXRlZCBTdGF0ZXMiLFBoaWxsaXBTU2h5QGZsZWNrZW5zLmh1LEhpc2VkMTk4NSxhaFNob29obzQsIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83NC4wLjM3MjkuMTA4IFNhZmFyaS81MzcuMzYiLDk0OS00NTUtMjQxMywxLFdlcm5lciwxMi8xOC8xOTg1LDM4LFNhZ2l0dGFyaXVzLE1hc3RlckNhcmQsNTQwMzI5MDIxMzAwMzM5NCw1NTEsMTAvMjAyOCw1NTgtMDgtMjM5NiwiMVogNjk0IDE0NSAyMyA3OTYxIDIwNCA3IiwxNzUyODUzNTA4LDM5MDE2MzQ0LFNpbHZlciwiT25jb2xvZ3kgbnVyc2UiLCJGb3JlbWFuICYgQ2xhcmsiLCIyMDExIEhvbGRlbiBFcGljYSIsamFzb25ib3dtYW4uY29tLEErLDE2Ni41LDc1LjcsIjUnIDYiIiIsMTY3LDY0ZTI4NzlhLTUyOGUtNGEzMS05N2I4LWVjYzlmN2JkZDBjNywzMy42OTk3OCwtMTE3Ljc4Mzk0Ng==</inboundTemplate>
      <outboundTemplate encoding="base64">ewogICAgInJlc291cmNlVHlwZSI6ICJQYXRpZW50IiwKICAgICJpZGVudGlmaWVyIjogWwogICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAiY29kaW5nIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YyLTAyMDMiLAogICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICJNUiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCgkJCSJzeXN0ZW0iOiAiaHR0cDovL2Vtci50ZXN0aG9zcGl0YWwuY29tL21ybiIsCiAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgImNvZGluZyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzIiwKICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAiU1MiCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9CiAgICBdLAogICAgIm5hbWUiOiBbCiAgICAgICAgewogICAgICAgICAgICAicHJlZml4IjogWyIiXSwKICAgICAgICAgICAgImdpdmVuIjogWyIiLCIiXSwKICAgICAgICAgICAgImZhbWlseSI6ICIiLAogICAgICAgICAgICAidXNlIjogInVzdWFsIiwKICAgICAgICAgICAgInRleHQiOiAiTFhnMHpzaHNENy1JR0IyTDU2UW84IgogICAgICAgIH0KICAgIF0sCiAgICAiZ2VuZGVyIjogIiIsCiAgICAiYmlydGhEYXRlIjogIiIsCiAgICAiYWRkcmVzcyI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJsaW5lIjogWyIiXSwKICAgICAgICAgICAgImNpdHkiOiAiIiwKICAgICAgICAgICAgInN0YXRlIjogIiIsCiAgICAgICAgICAgICJwb3N0YWxDb2RlIjogIiIsCiAgICAgICAgICAgICJjb3VudHJ5IjogIiIKICAgICAgICB9CiAgICBdLAogICAgInRlbGVjb20iOiBbCiAgICAgICAgewogICAgICAgICAgICAic3lzdGVtIjogImVtYWlsIiwKICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgInN5c3RlbSI6ICJwaG9uZSIsCiAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfQogICAgXSwKICAgICJleHRlbnNpb24iOiBbCiAgICAgICAgewogICAgICAgICAgICAidXJsIjogImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9wYXRpZW50LW1vdGhlcnNNYWlkZW5OYW1lIiwKICAgICAgICAgICAgInZhbHVlU3RyaW5nIjogIiIKICAgICAgICB9CiAgICBdCn0=</outboundTemplate>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.3.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.3.0">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <columnNames>
            <string>Number</string>
            <string>Gender</string>
            <string>NameSet</string>
            <string>Title</string>
            <string>GivenName</string>
            <string>MiddleInitial</string>
            <string>Surname</string>
            <string>StreetAddress</string>
            <string>City</string>
            <string>State</string>
            <string>StateFull</string>
            <string>ZipCode</string>
            <string>Country</string>
            <string>CountryFull</string>
            <string>EmailAddress</string>
            <string>Username</string>
            <string>Password</string>
            <string>BrowserUserAgent</string>
            <string>TelephoneNumber</string>
            <string>TelephoneCountryCode</string>
            <string>MothersMaiden</string>
            <string>Birthday</string>
            <string>Age</string>
            <string>TropicalZodiac</string>
            <string>CCType</string>
            <string>CCNumber</string>
            <string>CVV2</string>
            <string>CCExpires</string>
            <string>NationalID</string>
            <string>UPS</string>
            <string>WesternUnionMTCN</string>
            <string>MoneyGramMTCN</string>
            <string>Color</string>
            <string>Occupation</string>
            <string>Company</string>
            <string>Vehicle</string>
            <string>Domain</string>
            <string>BloodType</string>
            <string>Pounds</string>
            <string>Kilograms</string>
            <string>FeetInches</string>
            <string>Centimeters</string>
            <string>GUID</string>
            <string>Latitude</string>
            <string>Longitude</string>
          </columnNames>
          <numberedRows>true</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.3.0">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.3.0">
          <splitType>Record</splitType>
          <batchSkipRecords>1</batchSkipRecords>
          <batchMessageDelimiter></batchMessageDelimiter>
          <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
          <batchGroupingColumn></batchGroupingColumn>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.3.0">
      <elements/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.3.0">
      <metaDataId>1</metaDataId>
      <name>Write to file</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.3.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.3.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>${fhir_csv_dir}/out</host>
        <outputPattern>${date.get(&apos;yyMMddHHmm&apos;)}_${strNumber}.json</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <keepConnectionOpen>true</keepConnectionOpen>
        <maxIdleTime>0</maxIdleTime>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="4.3.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.3.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.3.0">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.3.0">
      <metaDataId>2</metaDataId>
      <name>POST to Server</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.3.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.3.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>http://localhost:8181/fhir/Patient</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map"/>
        <parameters class="linked-hash-map"/>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes></responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${message.encodedData}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.3.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.3.0">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.3.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.3.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.3.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.3.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.3.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1720873985892</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.3.0">
        <id>ec2dd1f8-24f9-43b2-9789-8c82f9670fa5</id>
        <name>Library 1</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658512</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>38c44a72-bf50-49bd-a8a0-2548fd6f4b6a</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>13a83ec6-4f22-45da-a926-a67299f52c57</string>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>44d05bf2-46a7-4ed7-8fda-59dd23f90cb3</string>
          <string>cc5893d8-f1b2-4a84-b215-07e164901f47</string>
          <string>2cbb9b74-fed5-4c44-8e05-e9ca602451a2</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>73cd9203-82b7-47a5-90d8-5d689464508c</string>
          <string>979f663b-e629-4618-abb4-fdc1326fa858</string>
          <string>8dd75b79-0d7c-4ca6-a42b-4ea29891baf9</string>
          <string>261d7994-8dd6-4636-8842-98de4f3f56b0</string>
          <string>273af240-b450-4976-8064-5bd538b47961</string>
          <string>a5a559a4-dd14-4c20-a123-af4e3a0b4656</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>e600fd15-4936-4c4e-b2e7-98f326febcc3</string>
          <string>f1ac57c3-87b0-4cc9-8cd7-da3897b1b043</string>
          <string>ed0ad127-7d17-4a5f-940b-b7c4bf5127d5</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>0927caad-b225-4d6c-9049-0cc92270cc61</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>fe07eda5-fc1a-41fe-bb5b-f8911446e484</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>ad324e34-5e66-4ba3-9dfe-97b814e5beb6</string>
          <string>41f3e772-4a14-4690-b849-bcec522c9a92</string>
          <string>a4c4241e-2512-4aa0-b5d2-ac34f5ad0f07</string>
          <string>edc18251-c8f7-4f63-983f-b14593b71cb4</string>
          <string>7f5f3b4d-302a-486c-a88a-5fcec5a27f1f</string>
          <string>474f487e-c17d-4bd8-9f9b-b379f967dd10</string>
          <string>9689acbf-7bc9-475e-b628-a306bcdd8358</string>
          <string>f8818e7a-c480-4f0c-ab06-94bb838ef6fc</string>
          <string>218c36db-0bb8-409e-9c02-f75bbb28f24f</string>
          <string>ce9b72d8-2453-4786-85fe-e4c4d2b2a02c</string>
          <string>4992c5c2-6512-4f3d-929a-82726a72a42c</string>
          <string>eee9701b-91ed-46ba-82a2-a1272ae38cab</string>
          <string>3bc74fb4-520f-4ee0-aa19-46e3d3f76935</string>
          <string>1f328c4d-a676-44c8-80e4-66a85dbb4236</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.3.0">
        <id>60f80d7e-c6b8-4299-8634-792ca3d49df2</id>
        <name>Library 2</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658508</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>8c261dbb-2f17-4466-a46e-c075575729bc</string>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>fca1a3ec-1dda-477b-979a-b7426eeca7af</string>
          <string>38c44a72-bf50-49bd-a8a0-2548fd6f4b6a</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>faf8c529-1778-48cf-bf33-9157a60eb590</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>c14aa42a-4121-492d-8e93-5a25c493a7da</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>5fb244de-67a3-4b7b-965b-646568556c9e</string>
          <string>0eaffc63-7119-4358-bbc9-5c8d154e3395</string>
          <string>29a68abc-6d2a-4b64-b199-b0273a928647</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>c894985a-8d56-4f45-991b-f8dedfb52d22</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>8fe6a6e6-7a20-4f91-aff7-ad8aa622936c</string>
          <string>b6bf2d00-7d0c-44e8-9b22-c307b399385d</string>
          <string>e3bf4603-b3ca-4185-b83c-513832c12d1c</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>bc983b4c-ada0-475d-b921-5b0840e53961</string>
          <string>3459fe68-1160-4028-b724-a67cae1e13c6</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>c075f818-e436-4db5-8abd-ffe03d01af1a</string>
          <string>fbfd9d7c-f0f4-480d-ae79-0a7216144852</string>
          <string>e3f7bbd9-8ad2-4c0b-a0fe-40a6df5ef502</string>
          <string>3fa2901b-0a71-4b05-b650-0ab961b36676</string>
          <string>6c3cb295-46bf-4742-81cb-4f2ba18c4847</string>
          <string>89b48085-7923-43ac-84bd-8b0eb1a96d9e</string>
          <string>7d4f8889-3c6c-475c-9599-6a9e40875651</string>
          <string>dc993461-d42a-4dd5-862c-d288b3869548</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.3.0">
        <id>7ba1963f-fd3d-4905-8c99-6c2fb2b8d197</id>
        <name>Library 3</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658503</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>8c261dbb-2f17-4466-a46e-c075575729bc</string>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>fca1a3ec-1dda-477b-979a-b7426eeca7af</string>
          <string>38c44a72-bf50-49bd-a8a0-2548fd6f4b6a</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>faf8c529-1778-48cf-bf33-9157a60eb590</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>c14aa42a-4121-492d-8e93-5a25c493a7da</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>5fb244de-67a3-4b7b-965b-646568556c9e</string>
          <string>0eaffc63-7119-4358-bbc9-5c8d154e3395</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>c894985a-8d56-4f45-991b-f8dedfb52d22</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>8fe6a6e6-7a20-4f91-aff7-ad8aa622936c</string>
          <string>b6bf2d00-7d0c-44e8-9b22-c307b399385d</string>
          <string>e3bf4603-b3ca-4185-b83c-513832c12d1c</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>bc983b4c-ada0-475d-b921-5b0840e53961</string>
          <string>3459fe68-1160-4028-b724-a67cae1e13c6</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>c075f818-e436-4db5-8abd-ffe03d01af1a</string>
          <string>fbfd9d7c-f0f4-480d-ae79-0a7216144852</string>
          <string>e3f7bbd9-8ad2-4c0b-a0fe-40a6df5ef502</string>
          <string>3fa2901b-0a71-4b05-b650-0ab961b36676</string>
          <string>6c3cb295-46bf-4742-81cb-4f2ba18c4847</string>
          <string>89b48085-7923-43ac-84bd-8b0eb1a96d9e</string>
          <string>7d4f8889-3c6c-475c-9599-6a9e40875651</string>
          <string>9b6c9f4c-b973-4bc9-99c8-6f60d03e8e8f</string>
          <string>dc993461-d42a-4dd5-862c-d288b3869548</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.3.0">
        <id>de2c06ec-bd2c-4094-a2cd-d11ba478e983</id>
        <name>Library 4</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658510</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>8c261dbb-2f17-4466-a46e-c075575729bc</string>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>fca1a3ec-1dda-477b-979a-b7426eeca7af</string>
          <string>38c44a72-bf50-49bd-a8a0-2548fd6f4b6a</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>faf8c529-1778-48cf-bf33-9157a60eb590</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>c14aa42a-4121-492d-8e93-5a25c493a7da</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>0eaffc63-7119-4358-bbc9-5c8d154e3395</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>c894985a-8d56-4f45-991b-f8dedfb52d22</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>8fe6a6e6-7a20-4f91-aff7-ad8aa622936c</string>
          <string>b6bf2d00-7d0c-44e8-9b22-c307b399385d</string>
          <string>e3bf4603-b3ca-4185-b83c-513832c12d1c</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>3459fe68-1160-4028-b724-a67cae1e13c6</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>e3f7bbd9-8ad2-4c0b-a0fe-40a6df5ef502</string>
          <string>3fa2901b-0a71-4b05-b650-0ab961b36676</string>
          <string>6c3cb295-46bf-4742-81cb-4f2ba18c4847</string>
          <string>89b48085-7923-43ac-84bd-8b0eb1a96d9e</string>
          <string>7d4f8889-3c6c-475c-9599-6a9e40875651</string>
          <string>dc993461-d42a-4dd5-862c-d288b3869548</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.3.0">
        <id>9008adb5-79b6-4dff-b319-3aeb515c0f26</id>
        <name>Library 5</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658511</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>8c261dbb-2f17-4466-a46e-c075575729bc</string>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>fca1a3ec-1dda-477b-979a-b7426eeca7af</string>
          <string>38c44a72-bf50-49bd-a8a0-2548fd6f4b6a</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>faf8c529-1778-48cf-bf33-9157a60eb590</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>c14aa42a-4121-492d-8e93-5a25c493a7da</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>5fb244de-67a3-4b7b-965b-646568556c9e</string>
          <string>0eaffc63-7119-4358-bbc9-5c8d154e3395</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>c894985a-8d56-4f45-991b-f8dedfb52d22</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>8fe6a6e6-7a20-4f91-aff7-ad8aa622936c</string>
          <string>b6bf2d00-7d0c-44e8-9b22-c307b399385d</string>
          <string>e3bf4603-b3ca-4185-b83c-513832c12d1c</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>bc983b4c-ada0-475d-b921-5b0840e53961</string>
          <string>3459fe68-1160-4028-b724-a67cae1e13c6</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>c075f818-e436-4db5-8abd-ffe03d01af1a</string>
          <string>fbfd9d7c-f0f4-480d-ae79-0a7216144852</string>
          <string>ce8b6027-b89d-4433-8755-fbafd1a9a532</string>
          <string>e3f7bbd9-8ad2-4c0b-a0fe-40a6df5ef502</string>
          <string>3fa2901b-0a71-4b05-b650-0ab961b36676</string>
          <string>6c3cb295-46bf-4742-81cb-4f2ba18c4847</string>
          <string>89b48085-7923-43ac-84bd-8b0eb1a96d9e</string>
          <string>7d4f8889-3c6c-475c-9599-6a9e40875651</string>
          <string>dc993461-d42a-4dd5-862c-d288b3869548</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.3.0">
        <id>fe021be6-8c74-4882-9aa6-e334d31f402e</id>
        <name>Octopus</name>
        <revision>1</revision>
        <lastModified>
          <time>1689431658489</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>New HealthAssyst Library that will create DataSets to be inserted in HealthAsyst Application based on the workflow.
Performs Automatic Validation of HL7 Messages.

</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c37a82e2-e935-44e0-849e-bec6b1c97e99</string>
          <string>45f4bf6c-2957-4130-a980-36aa66dbe1b9</string>
          <string>84157f34-3f43-46ec-94f3-99fde0995aca</string>
          <string>e4e1fad2-ae8a-4936-ac10-f2adf891106e</string>
          <string>e5f14f33-c4ba-4fe4-9451-7d04e753bf95</string>
          <string>6b1c3c7b-1014-42c3-ab97-ed26cf65c9f2</string>
          <string>700f59e7-47b4-451e-9455-906590fd02b0</string>
          <string>1790101f-5e97-4490-b20c-90884f969d3b</string>
          <string>e47bd348-5a39-4962-bb8f-d41da675566d</string>
          <string>27c1528c-32a5-43e2-8d68-b6c1a020779e</string>
          <string>bb2b86d6-cbaa-4f71-8eb6-3e0e20926b37</string>
          <string>e600fd15-4936-4c4e-b2e7-98f326febcc3</string>
          <string>891a6056-84ee-43ec-b0bc-e800956b7e7f</string>
          <string>3d98bbcc-654e-4933-863e-e74961315083</string>
          <string>280143b5-95aa-4c9b-aba1-ca581e20c65f</string>
          <string>c01027cb-2e1f-436f-9cdb-b8d230e91e87</string>
          <string>e4e0fde8-abda-408e-9ceb-ffcfe525bad6</string>
          <string>4fe85f99-a010-42a6-b46d-ef7dc4e814fa</string>
          <string>189828d1-5ab8-4f36-8458-4462677d1917</string>
          <string>c075f818-e436-4db5-8abd-ffe03d01af1a</string>
          <string>f78d0963-5ca1-41e2-b2f8-f63f87d16f22</string>
          <string>23d4b101-627e-4757-8396-02bfe4ef6e8e</string>
          <string>beacbb42-348e-4987-a83f-b6e4e5f52f57</string>
          <string>068f7156-5f3f-44b8-addc-8b019f246508</string>
          <string>14cc38d1-90ac-4cd0-bf0e-7d5e0b4cc68e</string>
          <string>88acd296-d980-425a-8cf8-cc7373a0d264</string>
          <string>fbde717a-1e18-4689-b5d5-79777bec3ff5</string>
          <string>64dc21e7-2a5c-437a-8ac2-d1d3816606ea</string>
          <string>8c102c6c-353c-49ce-8f49-c9d7d687875a</string>
          <string>49fc77ab-a19f-42c2-84ae-49269f0f7fa5</string>
          <string>ab957190-4a02-4ad0-8d89-b052b75c14da</string>
          <string>9c5f7b53-1bf8-460f-bcaf-51241b814e5d</string>
          <string>13a83ec6-4f22-45da-a926-a67299f52c57</string>
          <string>54b3eb37-2410-45f8-988d-992b131e7ac6</string>
          <string>2bea57a0-fa20-4d70-a252-a817c1fdd294</string>
          <string>df9c03a7-ca29-4b30-87c1-855a8819bc1e</string>
          <string>771162f5-3bed-4f03-9de2-5b625fe35308</string>
          <string>16fea1f3-3ce1-45bd-9be8-80af29905bfd</string>
          <string>251517cf-cda0-4767-a5b1-b99c07c74203</string>
          <string>b66c0fd3-0e7c-4865-a066-9d5cd1c7d7fe</string>
          <string>07add2e2-d22a-448a-9367-f39acde4588c</string>
          <string>71d5cc7b-b688-46eb-bc82-d9b6b8d8e2f5</string>
          <string>6e250621-47a8-4a5a-a277-0e7080c97c0a</string>
          <string>40b86107-12e1-4ac5-81cb-96232e3c4cd7</string>
          <string>6038f930-a48a-4cf8-982d-cadc7f8fe60b</string>
          <string>2c68fa3a-3754-4aec-acd9-3f5d7961f8c6</string>
          <string>018c9006-5a81-4627-9155-1dfb73f40f02</string>
          <string>cb5f6c1c-3e11-45da-90d1-e191b08596a9</string>
          <string>5d4d765d-1fed-4dc2-97a4-e9ab63ef7522</string>
          <string>ed0ad127-7d17-4a5f-940b-b7c4bf5127d5</string>
          <string>4c090c61-f635-4f10-8e48-03fefd6f26b6</string>
          <string>e33e4421-4550-4a9f-85c0-9b8ba3a842a7</string>
          <string>bc57a1e2-83b9-4723-bd2d-cc7e92a38ebe</string>
          <string>81577457-8047-49b1-a24b-4b63c98788ee</string>
          <string>dcc99dba-986a-40f9-8a25-4eec19e47c76</string>
          <string>54bc2c48-a3c7-4bad-a1f0-3a692674161d</string>
          <string>d9278d5d-0b65-4c99-8518-a029a01969a2</string>
          <string>cfe88ff4-8a9e-49cc-8f79-2b8f81a1caf9</string>
          <string>f0aff170-daac-403d-b6bf-2bf2b5d64855</string>
          <string>c84caa64-8172-4cca-b77f-c60b99c2cf46</string>
          <string>a7a8b2b4-74b2-4997-b463-67c82de1121e</string>
          <string>5ad39d8d-59f0-427a-a6e8-9e2738643aae</string>
          <string>fe803f54-9f01-4629-b32a-ca5414aa5c21</string>
          <string>3bc74fb4-520f-4ee0-aa19-46e3d3f76935</string>
          <string>2c7b2d8c-38d8-4ffc-8415-262ac186d870</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>a0e9b27d-6f63-43d8-83e9-019aa1fc7550</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.3.0">
            <id>970b252e-673d-4848-a2f1-51e25ae6856d</id>
            <name>CatalogueMaps</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658651</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Map maintainence Module for the available catalogues in HealthAsyst.
    .TODO - Bring all the catalogueMaps to this method.

    @param {String} input - Input Value to be supplied from outside.
    @param {String} type - gender, race, appointmentType only.
    @param {String} direction - inboundMaps,outBoundMaps only. If not provided defaults to inboundMaps.
    @return {String} Mapped Value.
    */
    function catalogueMaps(input, type, direction) {

    // type - type of map that needs to be invoked
    // direction - inboundMaps or outboundMaps
    //input = input.toUpperCase();
    type=type.toUpperCase();

    //if(direction)
    if (!direction) direction = &apos;inboundMaps&apos;;

    switch (direction) {

    case &apos;inboundMaps&apos;:
    {

    switch (type) {
    case &apos;GENDER&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;M&apos;:
    return &apos;Male&apos;;
    case &apos;F&apos;:
    return &apos;Female&apos;;
    case &apos;U&apos;:
    return &apos;Unknown&apos;;
    case &apos;O&apos;:
    return &apos;Others&apos;;
    default:
    return input;
    }
    }
    case &apos;APPOINTMENTTYPE&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;S12&apos;:
    return &apos;Booked&apos;;
    case &apos;S13&apos;:
    return &apos;Reschedule&apos;;
    case &apos;S15&apos;:
    return &apos;Canceled&apos;;

    }
    }
    case &apos;MARITALSTATUS&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;S&apos;:
    return &apos;Single&apos;;
    case &apos;M&apos;:
    return &apos;Married&apos;;
    case &apos;A&apos;:
    return &apos;Separated&apos;;
    case &apos;U&apos;:
    return &apos;Unknown&apos;;
    case &apos;O&apos;:
    return &apos;Other&apos;;
    default:
    return input;
    }
    }
    case &apos;MESSAGEEVENT&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;CANCEL/PATIENT&apos;:
    case &apos;CANCEL/DOCTOR&apos;:
    case &apos;NO SHOW&apos;:
    case &apos;OPERATOR ERROR&apos;:
    case &apos;CANCEL LESS THAN 24HRS&apos;:
    case &apos;CANCELLED&apos;:
    case &apos;DECEASED&apos;:
    return &apos;S15&apos;;
    case &apos;RESCHEDULE&apos;:
    return &apos;S13&apos;;
    case &apos;ARRIVED&apos;:
    case &apos;COMPLETED VIA PMS&apos;:
    return &apos;S14&apos;;
    default:
    return &apos;S12&apos;;
    }
    }
    }


    }
    case &apos;outboundMaps&apos;:
    {
    switch (type) {
    case &apos;MESSAGEEVENTTYPE&apos;:
    {

    switch (input.toUpperCase()) {
    case &apos;ADTDEMOGRAPHICSUPDATE&apos;:
    return &apos;ADT&apos;;
    case &apos;SIUAPPOINTMENTUPDATE&apos;:
    return &apos;SIU&apos;;
    case &apos;ORUHISTORYITEMSUPDATE&apos;:
    return &apos;ORU&apos;;
    case &apos;DOCUMENTSUPDATE&apos;:
    return &apos;MDM&apos;;
    default:
    return &apos;&apos;;
    }
    }
    case &apos;MESSAGEEVENTCODE&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;ADTDEMOGRAPHICSUPDATE&apos;:
    return &apos;A08&apos;;
    case &apos;SIUAPPOINTMENTUPDATE&apos;:
    return &apos;S14&apos;;
    case &apos;ORUHISTORYITEMSUPDATE&apos;:
    return &apos;R01&apos;;
    case &apos;DOCUMENTSUPDATE&apos;:
    return &apos;T02&apos;;
    default:
    return &apos;&apos;;
    }
    }
    case &apos;MESSAGEAPISTATUS&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;SENT&apos;:
    return &apos;Success&apos;;
    case &apos;ERROR&apos;:
    return &apos;Failure&apos;;
    default:
    return input;
    }
    }
    case &apos;GENDER&apos;:
    {
    switch (input.toUpperCase()) {
    case &apos;MALE&apos;:
    return &apos;M&apos;;
    case &apos;FEMALE&apos;:
    return &apos;F&apos;;
    case &apos;UNKNOWN&apos;:
    return &apos;U&apos;;
    case &apos;OTHERS&apos;:
    return &apos;O&apos;;
    default:
    return input;
    }
    }
    }
    }
    }
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>3928d547-4ff9-40cb-9970-f2714974fcc1</id>
            <name>Clinical DataSet</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658585</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} crsInput - 
	@param {Any} sType - 
	@return {Any} 
*/
function returnClinicalTD(crsInput, sType) {
    sType = &apos;&apos; + crsInput.getString(&apos;msh_messagetype&apos;) + &apos;&apos;;
    sSeperator = &apos;$!#@&apos;
    sValueSeperator = &apos;$#@&apos;
    oClinicalDataSet = new Object();
    xClinical = new XML(&apos;&lt;Clinical /&gt;&apos;);
    xTargetClincalDataset = new XML(&apos;&lt;TargetClinicalDataSet /&gt;&apos;);
    xDemographics = new XML(&apos;&lt;Demographics /&gt;&apos;);
    xDemographics.LastName = crsInput.getString(&apos;pid_lastname&apos;).replace(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;); //Patient LastName
    xDemographics.FirstName = crsInput.getString(&apos;pid_firtstname&apos;).replace(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;); //Patient First Name
    xDemographics.SSN = crsInput.getString(&apos;pid_ssnnumber&apos;); //Patient SSn
    xDemographics.DOB = formatter(crsInput.getString(&apos;pid_date_timeofbirth&apos;), &apos;DOB&apos;); //Patient DateOfBirth
    xDemographics.PatientID = crsInput.getString(&apos;pid_patientid&apos;); //Patinet ID
    xDemographics.AppointmentNumber = crsInput.getString(&apos;schplacerappointmentid&apos;); //Appointment ID
    xTargetClincalDataset.Demographics = xDemographics;

    switch (sType) {


        case &quot;Allergies&quot;:
            {

                sAllergies = &apos;&apos; + crsInput.getString(&apos;Allergy&apos;) + &apos;&apos;;
                xClinical.Allergies = new XML(&apos;&lt;Allergies /&gt;&apos;);
                aAllergies = sAllergies.split(sSeperator);

                for (i = 1; i &lt; aAllergies.length; i++) { //0 to 3
                    aAllergiesInfo = aAllergies[i].split(sValueSeperator);
                    xAllergy = new XML(&apos;&lt;Allergy /&gt;&apos;);
                    xAllergy.Name = aAllergiesInfo[0]; //Allergy Name/description
                    xAllergy.ExternalIdentifier = aAllergiesInfo[1]; //Allergy External Indentifier
                    xAllergy.EncounterID = aAllergiesInfo[2]; //EncounterID
                    xAllergy.AllergyID = aAllergiesInfo[3]; //Allergy ID
                    xAllergy.Reaction = aAllergiesInfo[4]; //Allrgic reaction
                    xAllergy.Severity = aAllergiesInfo[5]; //Severity
                    xAllergy.Status = aAllergiesInfo[6]; //Allergy Status default is Active (we are getting only active allergies for patient)
                    xAllergy.ReactionDate = aAllergiesInfo[7]; //Reaction date
                    xAllergy.EndTime = aAllergiesInfo[8]; //Allergy End date 
                    xAllergy.Notes = aAllergiesInfo[9]; //Allergy Notes
                    xAllergy.UNIICode = aAllergiesInfo[10]; //UNIICODE
                    xAllergy.RXNORM = aAllergiesInfo[11]; //RXNORM
                    xAllergy.DDI = aAllergiesInfo[12]; //Allergy DDID
                    xAllergy.SNOMED = aAllergiesInfo[13]; //Allergy SNOMED
                    xAllergy.CodeSystem = aAllergiesInfo[14]; //CodeSystem
                    if (aAllergiesInfo[12] != &apos;&apos;)
                        xAllergy.Code = aAllergiesInfo[12]
                    else xAllergy.Code = aAllergiesInfo[13]

                    xAllergy.DetailText = aAllergiesInfo[16]; //Detail text
                    xAllergy.AnswerValue1 = aAllergiesInfo[17]; //Answer value1
                    xAllergy.AnswerValue2 = aAllergiesInfo[18]; //Answer value2
                    xAllergy.MultipleAnsValues = aAllergiesInfo[19]; //Multiple answer values
                    xClinical.Allergies.Allergies += xAllergy;


                }
                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;
            }

        case &quot;Medications&quot;:
            {

                sMedications = &apos;&apos; + crsInput.getString(&apos;Medication&apos;) + &apos;&apos;;

                xClinical.Medications = new XML(&apos;&lt;Medications /&gt;&apos;)
                aMedications = sMedications.split(sSeperator);

                for (i = 1; i &lt; aMedications.length; i++) { //0 to 3
                    aMedicationsInfo = aMedications[i].split(sValueSeperator);
                    xMedication = new XML(&apos;&lt;Medication /&gt;&apos;);
                    xMedication.Name = aMedicationsInfo[0]; //Medication Name/Description
                    xMedication.ExternalIdentifier = aMedicationsInfo[1]; //ExternalID
                    xMedication.EncounterID = aMedicationsInfo[2]; //Encounter ID
                    xMedication.MedicationID = aMedicationsInfo[3]; //Medication ID
                    xMedication.StartDate = aMedicationsInfo[4]; //Medication start date
                    xMedication.EndDate = aMedicationsInfo[5]; //medication end date
                    xMedication.SIG = aMedicationsInfo[6]; //SIG values for the medication
                    xMedication.Status = aMedicationsInfo[7]; //Meducation status
                    xMedication.RouteOfAdministration = aMedicationsInfo[8]; //Rout of Administrattion
                    xMedication.DoseQuantity = &apos;&apos;; //dose quantity
                    xMedication.DaysSupply = &apos;&apos;; //days supply
                    xMedication.Refill = &apos;&apos;; //Refills
                    xMedication.Unit = &apos;&apos;; //Units
                    xMedication.Performer = aMedicationsInfo[13]; //provider name
                    xMedication.ManufactureName = &apos;&apos;; //Manufacture Name
                    xMedication.RXNORM = aMedicationsInfo[16]; //RXNORM
                    xMedication.DDI = aMedicationsInfo[17]; //DDI
                    xMedication.NDC = aMedicationsInfo[18]; //NDC NUM
                    xMedication.Notes = aMedicationsInfo[19]; //Notes
                    xMedication.CodeSystem = aMedicationsInfo[20]; //Code system
                    xMedication.Code = aMedicationsInfo[21]; //Code value
                    xMedication.DetailText = &apos;&apos;; //detail text
                    xMedication.AnswerValue1 = &apos;&apos;; //answer value 1
                    xMedication.AnswerValue2 = &apos;&apos;; //answer value2
                    xMedication.MultipleAnsValues = &apos;&apos;; //multiple answers

                    xClinical.Medications.Medications += xMedication;

                }
                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
        case &quot;SocHx&quot;:
            {

                sSocHx = &apos;&apos; + crsInput.getString(&apos;SocialHistory&apos;) + &apos;&apos;;

                xClinical.Problems = new XML(&apos;&lt;Problems /&gt;&apos;)
                aSocHx = sSocHx.split(sSeperator);

                for (i = 1; i &lt; aSocHx.length; i++) { //0 to 3
                    aSocHxInfo = aSocHx[i].split(sValueSeperator);
                    xSocHx = new XML(&apos;&lt;SocialHistoryProblem /&gt;&apos;);
                    xSocHx.Name = aSocHxInfo[0]; //Social History Description
                    xSocHx.Status = aSocHxInfo[1]; //Social History  status
                    xSocHx.ExternalIdentifier = &apos;xxx00&apos;; // Social History  ExternalID
                    xSocHx.EncounterID = aSocHxInfo[3]; //Social History  Encounter ID
                    xSocHx.ProblemID = aSocHxInfo[4]; //Social History  ID
                    xSocHx.OnsetDate = aSocHxInfo[5]; //Social History  start date
                    xSocHx.ResolvedDate = aSocHxInfo[6]; //Social History  end date
                    xSocHx.ICD9Code = aSocHxInfo[9]; //Social History  ICD9 Code
                    xSocHx.ICD10Code = aSocHxInfo[10]; //Social History  ICD10 Code
                    xSocHx.SNOMEDCODE = aSocHxInfo[11]; //Social History  SNOMED Code
                    xSocHx.Notes = aSocHxInfo[7]; //Social History  Notes
                    xSocHx.CodeSystem = aSocHxInfo[13]; //Social History  code system
                    xSocHx.Code = aSocHxInfo[14]; //Social History  Code
                    xSocHx.DetailText = aSocHxInfo[15]; //Social History Detail text
                    xSocHx.AnswerValue1 = &apos;&apos;; //answer value 1
                    xSocHx.AnswerValue2 = &apos;&apos;; //answer value2
                    xSocHx.MultipleAnsValues = &apos;&apos;; //multiple answers
                    xClinical.Problems.Problems += xSocHx;

                }

                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
        case &quot;PMH&quot;:
            {

                sPMH = &apos;&apos; + crsInput.getString(&apos;PastMedicalHistory&apos;) + &apos;&apos;;

                xClinical.Problems = new XML(&apos;&lt;Problems /&gt;&apos;)
                aPMH = sPMH.split(sSeperator);

                for (i = 1; i &lt; aPMH.length; i++) { //0 to 3
                    aPMHInfo = aPMH[i].split(sValueSeperator);
                    xPMH = new XML(&apos;&lt;PastMedicalHistoryProblem /&gt;&apos;);
                    xPMH.Name = aPMHInfo[0]; //Past Medical History Description
                    xPMH.Status = aPMHInfo[1]; //Past Medical History  status
                    xPMH.ExternalIdentifier = &apos;xxx00&apos;; // Past Medical History  ExternalID
                    xPMH.EncounterID = aPMHInfo[3]; //Past Medical History  Encounter ID
                    xPMH.ProblemID = aPMHInfo[4]; //Past Medical History  ID
                    xPMH.OnsetDate = aPMHInfo[5]; //Past Medical History  start date
                    xPMH.ResolvedDate = aPMHInfo[6]; //Past Medical History  end date
                    xPMH.ICD9Code = aPMHInfo[9]; //Past Medical History  ICD9 Code
                    xPMH.ICD10Code = aPMHInfo[10]; //Past Medical History  ICD10 Code
                    xPMH.SNOMEDCODE = aPMHInfo[11]; //Past Medical History  SNOMED Code
                    xPMH.Notes = aPMHInfo[7]; //Past Medical History  Notes
                    xPMH.CodeSystem = aPMHInfo[13]; //Past Medical History  code system
                    xPMH.Code = aPMHInfo[14]; //Past Medical History  Code
                    xPMH.DetailText = aPMHInfo[15]; //Past Medical History Detail text
                    xPMH.AnswerValue1 = &apos;&apos;; //answer value 1
                    xPMH.AnswerValue2 = &apos;&apos;; //answer value2
                    xPMH.MultipleAnsValues = &apos;&apos;; //multiple answers
                    xClinical.Problems.Problems += xPMH;

                }

                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
        case &quot;PSH&quot;:
            {

                sPSH = &apos;&apos; + crsInput.getString(&apos;SurgicalHistory&apos;) + &apos;&apos;;

                xClinical.Problems = new XML(&apos;&lt;Problems /&gt;&apos;)
                aPSH = sPSH.split(sSeperator);

                for (i = 1; i &lt; aPSH.length; i++) { //0 to 3
                    aPSHInfo = aPSH[i].split(sValueSeperator);
                    xPSH = new XML(&apos;&lt;PatientSurgicalHistoryProblem /&gt;&apos;);
                    xPSH.Name = aPSHInfo[0]; //Past Medical History Description
                    xPSH.Status = aPSHInfo[1]; //Past Medical History  status
                    xPSH.ExternalIdentifier = &apos;xxx00&apos;; // Past Medical History  ExternalID
                    xPSH.EncounterID = aPSHInfo[3]; //Past Medical History  Encounter ID
                    xPSH.ProblemID = aPSHInfo[4]; //Past Medical History  ID
                    xPSH.OnsetDate = aPSHInfo[5]; //Past Medical History  start date
                    xPSH.ResolvedDate = aPSHInfo[6]; //Past Medical History  end date
                    xPSH.ICD9Code = aPSHInfo[9]; //Past Medical History  ICD9 Code
                    xPSH.ICD10Code = aPSHInfo[10]; //Past Medical History  ICD10 Code
                    xPSH.SNOMEDCODE = aPSHInfo[11]; //Past Medical History  SNOMED Code
                    xPSH.Notes = aPSHInfo[7]; //Past Medical History  Notes
                    xPSH.CodeSystem = aPSHInfo[13]; //Past Medical History  code system
                    xPSH.Code = aPSHInfo[14]; //Past Medical History  Code
                    xPSH.DetailText = aPSHInfo[15]; //Past Medical History Detail text
                    xPSH.AnswerValue1 = &apos;&apos;; //answer value 1
                    xPSH.AnswerValue2 = &apos;&apos;; //answer value2
                    xPSH.MultipleAnsValues = &apos;&apos;; //multiple answers
                    xClinical.Problems.Problems += xPSH;

                }

                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
        case &quot;FamHx&quot;:
            {

                sFamHx = &apos;&apos; + crsInput.getString(&apos;FamilyHistory&apos;) + &apos;&apos;;

                xClinical.Problems = new XML(&apos;&lt;Problems /&gt;&apos;)
                aFamHx = sFamHx.split(sSeperator);

                for (i = 1; i &lt; aFamHx.length; i++) { //0 to 3
                    aFamHxInfo = aFamHx[i].split(sValueSeperator);
                    xFamHx = new XML(&apos;&lt;FamilyHistoryProblem /&gt;&apos;);
                    xFamHx.Name = aFamHxInfo[0]; //Past Medical History Description
                    xFamHx.Status = aFamHxInfo[1]; //Past Medical History  status
                    xFamHx.ExternalIdentifier = &apos;xxx00&apos;; // Past Medical History  ExternalID
                    xFamHx.EncounterID = aFamHxInfo[3]; //Past Medical History  Encounter ID
                    xFamHx.ProblemID = aFamHxInfo[4]; //Past Medical History  ID
                    xFamHx.OnsetDate = aFamHxInfo[5]; //Past Medical History  start date
                    xFamHx.ResolvedDate = aFamHxInfo[6]; //Past Medical History  end date
                    xFamHx.ICD9Code = aFamHxInfo[9]; //Past Medical History  ICD9 Code
                    xFamHx.ICD10Code = aFamHxInfo[10]; //Past Medical History  ICD10 Code
                    xFamHx.SNOMEDCODE = aFamHxInfo[11]; //Past Medical History  SNOMED Code
                    xFamHx.Notes = aFamHxInfo[7]; //Past Medical History  Notes
                    xFamHx.CodeSystem = aFamHxInfo[13]; //Past Medical History  code system
                    xFamHx.Code = aFamHxInfo[14]; //Past Medical History  Code
                    xFamHx.DetailText = aFamHxInfo[15]; //Past Medical History Detail text
                    xFamHx.AnswerValue1 = &apos;&apos;; //answer value 1
                    xFamHx.AnswerValue2 = &apos;&apos;; //answer value2
                    xFamHx.MultipleAnsValues = &apos;&apos;; //multiple answers
                    xClinical.Problems.Problems += xFamHx;

                }

                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
       case &quot;Immun&quot;:
            {

                sImmunHx = &apos;&apos; + crsInput.getString(&apos;PatientImmunizationHistory&apos;) + &apos;&apos;;

                xClinical.Medications = new XML(&apos;&lt;Medications /&gt;&apos;)
                aImmunHx = sImmunHx.split(sSeperator);
				
                for (i = 1; i &lt; aImmunHx.length; i++) { //0 to 3
                    aImmunHxInfo = aImmunHx[i].split(sValueSeperator);
				
                    xImmunHx = new XML(&apos;&lt;Immunization /&gt;&apos;);
                    xImmunHx.Name = aImmunHxInfo[0]; //History of Immunization  Description
                    xImmunHx.ExternalIdentifier = &apos;xxx00&apos;; //History of Immunization  ExternalID                   
                    xImmunHx.EncounterID = aImmunHxInfo[3]; //History of Immunization  Encounter ID
                    xImmunHx.StartDate = aImmunHxInfo[5]; //History of Immunization  administered date
                    xImmunHx.ResolvedDate = aImmunHxInfo[6]; //History of Immunization  end date
                    xImmunHx.SIG = &apos;&apos;; //History of Immunization SIG value
                    xImmunHx.Status = aImmunHxInfo[1]; //History of Immunization  status
                    xImmunHx.RouteOfAdministration=&apos;&apos;;//History of Immunization Route of administration
                   	xImmunHx.DoseQuantity=aImmunHxInfo[7]; //History of Immunization dose quantity
                   	xImmunHx.DaysSupply=aImmunHxInfo[8]; //History of Immunization days supply
                   	xImmunHx.Unit=aImmunHxInfo[9]; //History of Immunization Units
                   	xImmunHx.Performer=aImmunHxInfo[10]; //History of Immunization performer
                   	xImmunHx.ManufactureName=aImmunHxInfo[11]; //History of Immunization manufacture name
                    xImmunHx.Rxnorm = &apos;&apos;; //History of Immunization rxnorm
                    xImmunHx.DDI = aImmunHxInfo[17]; //History of Immunization DDID code
                    xImmunHx.NDC = aImmunHxInfo[18]; //History of Immunization NDC code
                    xImmunHx.Notes = aImmunHxInfo[12]; //History of Immunization Notes
                    xImmunHx.CodeSystem = aImmunHxInfo[13]; //History of Immunization  code system
                    xImmunHx.Code = aImmunHxInfo[14]; //History of Immunization Code
                    xImmunHx.DetailText = aImmunHxInfo[15]; //History of Immunization Detail text
                    xImmunHx.AnswerValue1 = aImmunHxInfo[16]; //History of Immunization value 1 (Series)
                    xImmunHx.AnswerValue2 = &apos;&apos;; //answer value2
                    xImmunHx.MultipleAnsValues = &apos;&apos;; //multiple answers
                    xClinical.Medications.Medications += xImmunHx;

                }

                xTargetClincalDataset.TargetClincalDataset = xClinical
                oClinicalDataSet.Clinical = xTargetClincalDataset;

                return oClinicalDataSet;

            }
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>8c4ec362-7a74-49e7-9f55-a255b2c33ace</id>
            <name>Create Generic HL7 Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658776</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} xInput - 
	@param {Any} sMessageType - 
	@param {Any} sTriggerEvent - 
	@return {Any} 
*/
function generateGenericHL7Message(xInput, oHeader) {
	var xMessage = &lt;HL7Message /&gt;;
	var methodName = &apos;&apos; + msg[&apos;requestPayload&apos;][&apos;methodName&apos;] + &apos;&apos;;

	createSegment(&apos;MSH&apos;, xMessage);
		xMessage.MSH[&apos;MSH.1&apos;]			=	&apos;|&apos;;
		xMessage.MSH[&apos;MSH.2&apos;]			=	&apos;^~\\&amp;&apos;;
		xMessage.MSH[&apos;MSH.3&apos;]			=	oHeader.MSH3;
		xMessage.MSH[&apos;MSH.4&apos;]			=	oHeader.MSH4;
		xMessage.MSH[&apos;MSH.5&apos;]			=	oHeader.MSH5;
		xMessage.MSH[&apos;MSH.6&apos;]			=	oHeader.MSH6;
		xMessage.MSH[&apos;MSH.7&apos;]			=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];//date
		xMessage.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]	=	catalogueMaps(&apos;&apos; + xInput[&apos;requestPayload&apos;][&apos;methodName&apos;] + &apos;&apos; , &apos;MESSAGEEVENTTYPE&apos;,&apos;outboundMaps&apos;);//event type
		xMessage.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]	=	catalogueMaps(&apos;&apos; + xInput[&apos;requestPayload&apos;][&apos;methodName&apos;] + &apos;&apos; , &apos;MESSAGEEVENTCODE&apos;,&apos;outboundMaps&apos;);//event code
		xMessage.MSH[&apos;MSH.10&apos;]			=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;] + new Date().getUTCMilliseconds();//Message Control Id
		xMessage.MSH[&apos;MSH.11&apos;]			=	&apos;P&apos;;//Processing id
		xMessage.MSH[&apos;MSH.12&apos;]			=	&apos;2.3&apos;;//Version ID
		xMessage.MSH[&apos;MSH.15&apos;][&apos;MSH.15.1&apos;] =	&apos;AL&apos;;
		xMessage.MSH[&apos;MSH.16&apos;][&apos;MSH.16.1&apos;] =	&apos;AL&apos;;

	if(methodName.toUpperCase() == &apos;ADTDEMOGRAPHICSUPDATE&apos; || methodName.toUpperCase() == &apos;DOCUMENTSUPDATE&apos;)
	{
		createSegment(&apos;EVN&apos;, xMessage);
		xMessage.EVN[&apos;EVN.1&apos;]			=	catalogueMaps(&apos;&apos; + xInput[&apos;requestPayload&apos;][&apos;methodName&apos;] + &apos;&apos; , &apos;MESSAGEEVENTCODE&apos;,&apos;outboundMaps&apos;);//event code;
		xMessage.EVN[&apos;EVN.2&apos;]			=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];
	}
	
	if(methodName.toUpperCase() == &apos;SIUAPPOINTMENTUPDATE&apos;)
	{	
		createSegment(&apos;SCH&apos;, xMessage);
		    xMessage.SCH[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentNo&apos;];
		    xMessage.SCH[&apos;SCH.1&apos;][&apos;SCH.1.2&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentNo&apos;];
		    xMessage.SCH[&apos;SCH.7&apos;] 	= xInput[&apos;appointment&apos;][&apos;reasonForVisit&apos;];
		    xMessage.SCH[&apos;SCH.8&apos;][&apos;SCH.8.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentType&apos;][&apos;code&apos;];
		    xMessage.SCH[&apos;SCH.8&apos;][&apos;SCH.8.2&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentType&apos;][&apos;description&apos;];
		    xMessage.SCH[&apos;SCH.9&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentDuration&apos;];
		    xMessage.SCH[&apos;SCH.10&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentDurationUnits&apos;];
		    xMessage.SCH[&apos;SCH.11&apos;][&apos;SCH.11.4&apos;]	= xInput[&apos;appointment&apos;][&apos;startTime&apos;];
		    xMessage.SCH[&apos;SCH.11&apos;][&apos;SCH.11.5&apos;] 	= xInput[&apos;appointment&apos;][&apos;endTime&apos;];
		    xMessage.SCH[&apos;SCH.16&apos;][&apos;SCH.16.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];
		    xMessage.SCH[&apos;SCH.16&apos;][&apos;SCH.16.2&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];
		    xMessage.SCH[&apos;SCH.16&apos;][&apos;SCH.16.3&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;lastName&apos;];
		    xMessage.SCH[&apos;SCH.16&apos;][&apos;SCH.16.4&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;middleName&apos;];
		    xMessage.SCH[&apos;SCH.20&apos;][&apos;SCH.20.1&apos;] 	= oHeader.OBR16;
		    xMessage.SCH[&apos;SCH.20&apos;][&apos;SCH.20.3&apos;] 	= oHeader.OBR16;
		    xMessage.SCH[&apos;SCH.25&apos;] 	= &quot;Started&quot;;
	}

    	createSegment(&apos;PID&apos;, xMessage);
	    xMessage.PID[&apos;PID.1&apos;]   = &apos;1&apos;; //1-Set ID - Patient ID
	    xMessage.PID[&apos;PID.2&apos;]   = xInput[&apos;patientData&apos;][&apos;patientID&apos;]; //2-Patient ID (External ID)
	    xMessage.PID[&apos;PID.3&apos;]   = xInput[&apos;patientData&apos;][&apos;patientID&apos;]; //3-Patient ID (Internal ID)
	    xMessage.PID[&apos;PID.5&apos;][&apos;PID.5.1&apos;] = xInput[&apos;patientData&apos;][&apos;name&apos;][&apos;lastName&apos;]; //5-Patient Last Name
	    xMessage.PID[&apos;PID.5&apos;][&apos;PID.5.2&apos;] = xInput[&apos;patientData&apos;][&apos;name&apos;][&apos;firstName&apos;]; //5-Patient First Name
	    xMessage.PID[&apos;PID.5&apos;][&apos;PID.5.3&apos;] = xInput[&apos;patientData&apos;][&apos;name&apos;][&apos;middleName&apos;]; //5-Patient Middle Name
	    xMessage.PID[&apos;PID.7&apos;]   = xInput[&apos;patientData&apos;][&apos;dob&apos;]; //7-Date of Birth
	    xMessage.PID[&apos;PID.8&apos;]   = catalogueMaps(&apos;&apos; + xInput[&apos;patientData&apos;][&apos;gender&apos;] + &apos;&apos; , &apos;GENDER&apos;,&apos;outboundMaps&apos;);//xInput[&apos;patientData&apos;][&apos;gender&apos;]; //8-Sex
	    //xMessage.PID[&apos;PID.9&apos;]   = &apos;&apos;; //9-Patient Alias
	    //xMessage.PID[&apos;PID.10&apos;]  = xInput[&apos;patientData&apos;][&apos;race&apos;] != null &amp;&amp; msg[&apos;patientData&apos;][&apos;race&apos;].length &gt; 0 ? msg[&apos;patientData&apos;][&apos;race&apos;][0][&apos;code&apos;] : &apos;&apos;; //10-Race
	    if(xInput[&apos;patientData&apos;][&apos;race&apos;] != null &amp;&amp; xInput[&apos;patientData&apos;][&apos;race&apos;].length &gt; 0)
      {
        var raceList = xInput[&apos;patientData&apos;][&apos;race&apos;][0][&apos;code&apos;];
        for(var i=2;i&lt;=xInput[&apos;patientData&apos;][&apos;race&apos;].length;i++)
        {
        raceList=raceList+&apos;~&apos;+xInput[&apos;patientData&apos;][&apos;race&apos;][i-1][&apos;code&apos;];
        }
        xMessage.PID[&apos;PID.10&apos;] = raceList;
      }
      else
      {
        xMessage.PID[&apos;PID.10&apos;] = &quot;&quot;;
      }
	    xMessage.PID[&apos;PID.11&apos;][&apos;PID.11.1&apos;]  = xInput[&apos;patientData&apos;][&apos;address&apos;][&apos;line1&apos;].toString(); //11-Patient Address
	    xMessage.PID[&apos;PID.11&apos;][&apos;PID.11.2&apos;]  = xInput[&apos;patientData&apos;][&apos;address&apos;][&apos;line2&apos;]; //11-Patient Address
	    xMessage.PID[&apos;PID.11&apos;][&apos;PID.11.3&apos;]  = xInput[&apos;patientData&apos;][&apos;address&apos;][&apos;city&apos;]; //11-Patient Address
	    xMessage.PID[&apos;PID.11&apos;][&apos;PID.11.4&apos;]  = xInput[&apos;patientData&apos;][&apos;address&apos;][&apos;state&apos;]; //11-Patient Address
	    xMessage.PID[&apos;PID.11&apos;][&apos;PID.11.5&apos;]  = xInput[&apos;patientData&apos;][&apos;address&apos;][&apos;zip&apos;]; //11-Patient Address
	    //xMessage.PID[&apos;PID.12&apos;]  = &apos;&apos;; //12-County Code
	    //xMessage.PID[&apos;PID.13&apos;][&apos;PID.13.1&apos;]  = xInput[&apos;patientData&apos;][&apos;homePhone&apos;]; //13-Phone Number - Home
	    //xMessage.PID[&apos;PID.13&apos;][&apos;PID.13.4&apos;]  = xInput[&apos;patientData&apos;][&apos;emailID&apos;]; //13-Phone Number - Home
	    
         xMessage.PID[&quot;PID.13&quot;][0]=&apos;&apos;
	    xMessage.PID[&quot;PID.13&quot;][0][&apos;PID.13.1&apos;]  = xInput[&apos;patientData&apos;][&apos;homePhone&apos;]; //13-Phone Number - Home
	    xMessage.PID[&quot;PID.13&quot;][0][&apos;PID.13.4&apos;]  = xInput[&apos;patientData&apos;][&apos;emailID&apos;]; //13-Phone Number - Home

	    if(xInput[&apos;patientData&apos;][&apos;mobilePhone&apos;] &amp;&amp; xInput[&apos;patientData&apos;][&apos;mobilePhone&apos;]!=&apos;&apos;)
	    {
	    xMessage.PID[&quot;PID.13&quot;][1]=&apos;&apos;
	    xMessage.PID[&quot;PID.13&quot;][1][&apos;PID.13.1&apos;]  = xInput[&apos;patientData&apos;][&apos;mobilePhone&apos;]; //13-Phone Number - Home
	    xMessage.PID[&quot;PID.13&quot;][1][&apos;PID.13.3&apos;]  = &apos;CP&apos;; //13-Phone Number - Home
	    }
	    xMessage.PID[&apos;PID.14&apos;]  = xInput[&apos;patientData&apos;][&apos;businessPhone&apos;]; //14-Phone Number - Business
	    xMessage.PID[&apos;PID.15&apos;]  = xInput[&apos;patientData&apos;][&apos;primaryLanguage&apos;]; //15-Primary Language
	    xMessage.PID[&apos;PID.16&apos;]  = xInput[&apos;patientData&apos;][&apos;maritalStatus&apos;]; //16-Marital Status
	    //xMessage.PID[&apos;PID.17&apos;]  = &apos;&apos;; //17-Religion
	    xMessage.PID[&apos;PID.18&apos;]  = xInput[&apos;patientData&apos;][&apos;patientAccountNumber&apos;]; //18-Patient Account Number
	    xMessage.PID[&apos;PID.19&apos;]  = xInput[&apos;patientData&apos;][&apos;ssn&apos;]; //19-SSN Number - Patient
	    //xMessage.PID[&apos;PID.20&apos;]  = &apos;&apos;; //20-Driver&apos;s License Number
	    //xMessage.PID[&apos;PID.21&apos;]  = &apos;&apos;; //21-Mother&apos;s Identifier
	    xMessage.PID[&apos;PID.22&apos;]  = xInput[&apos;patientData&apos;][&apos;ethnicity&apos;].replace(&apos;,&apos;,&apos;~&apos;); //22-Ethnic Group
	    //xMessage.PID[&apos;PID.23&apos;]  = &apos;&apos;; //23-Birth Place
	    //xMessage.PID[&apos;PID.24&apos;]  = &apos;&apos;; //24-Multiple Birth Indicator
	    //xMessage.PID[&apos;PID.25&apos;]  = &apos;&apos;; //25-Birth Order
	    //xMessage.PID[&apos;PID.26&apos;]  = &apos;&apos;; //26-Citizenship
	    //xMessage.PID[&apos;PID.27&apos;]  = &apos;&apos;; //27-Veterans Military Status
	    //xMessage.PID[&apos;PID.28&apos;]  = &apos;&apos;; //28-Nationality Code
	    //xMessage.PID[&apos;PID.29&apos;]  = &apos;&apos;; //29-Patient Death Date and Time
	    //xMessage.PID[&apos;PID.30&apos;]  = &apos;&apos;; //30-Patient Death Indicator
	    xMessage.PID[&apos;PID.40&apos;]  = xInput[&apos;patientData&apos;][&apos;contactMethod&apos;] != null &amp;&amp; xInput[&apos;patientData&apos;][&apos;contactMethod&apos;].length &gt; 0 ? xInput[&apos;patientData&apos;][&apos;contactMethod&apos;][0][&apos;code&apos;] : &apos;&apos;;


	if(methodName.toUpperCase() == &apos;SIUAPPOINTMENTUPDATE&apos;)
	{
		createSegment(&apos;PV1&apos;, xMessage);
		    xMessage.PV1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerListName&apos;];
		    xMessage.PV1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];
		    xMessage.PV1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;middleName&apos;];
		
		    xMessage.PV1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerListName&apos;];
		    xMessage.PV1[&apos;PV1.7&apos;][&apos;PV1.7.2&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;lastName&apos;];
		    xMessage.PV1[&apos;PV1.7&apos;][&apos;PV1.7.3&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];
		    xMessage.PV1[&apos;PV1.7&apos;][&apos;PV1.7.4&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;middleName&apos;];
		    xMessage.PV1[&apos;PV1.7&apos;][&apos;PV1.7.5&apos;]	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerDegree&apos;];
	
		createSegment(&apos;AIL&apos;, xMessage);
		    xMessage.AIL[&apos;AIL.3&apos;][&apos;AIL.3.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;location&apos;][&apos;locationName&apos;];

		createSegment(&apos;AIP&apos;, xMessage);
		    xMessage.AIP[&apos;AIP.3&apos;][&apos;AIP.3.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerListName&apos;];
		    xMessage.AIP[&apos;AIP.3&apos;][&apos;AIP.3.2&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;lastName&apos;];
		    xMessage.AIP[&apos;AIP.3&apos;][&apos;AIP.3.3&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];
		    xMessage.AIP[&apos;AIP.3&apos;][&apos;AIP.3.4&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerName&apos;][&apos;middleName&apos;];
		    xMessage.AIP[&apos;AIP.3&apos;][&apos;AIP.3.5&apos;] 	= xInput[&apos;appointment&apos;][&apos;provider&apos;][&apos;providerDegree&apos;];
		    xMessage.AIP[&apos;AIP.6&apos;][&apos;AIP.6.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;startTime&apos;];
		    xMessage.AIP[&apos;AIP.9&apos;][&apos;AIP.9.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentDuration&apos;];
		    xMessage.AIP[&apos;AIP.10&apos;][&apos;AIP.10.1&apos;] 	= xInput[&apos;appointment&apos;][&apos;appointmentDurationUnits&apos;];
	}

	if(methodName.toUpperCase() == &apos;ORUHISTORYITEMSUPDATE&apos;)
	{
		createSegment(&apos;OBR&apos;, xMessage);
		xMessage.OBR[&apos;OBR.1&apos;]			=	&apos;1&apos;;
		xMessage.OBR[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;]	=	&apos;data entered by patient&apos;;
		xMessage.OBR[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;]	=	&apos;HealthAsystResults&apos;;
		xMessage.OBR[&apos;OBR.7&apos;][&apos;OBR.7.1&apos;]	=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];
		xMessage.OBR[&apos;OBR.16&apos;]			=	oHeader.OBR16;
		xMessage.OBR[&apos;OBR.18&apos;][&apos;OBR.18.1&apos;]	=	&apos;&apos;;
		xMessage.OBR[&apos;OBR.22&apos;][&apos;OBR.22.1&apos;]	=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];
		xMessage.OBR[&apos;OBR.25&apos;]			=	&apos;F&apos;;
				
		var index;
		for (index = 0; index &lt; xInput[&apos;clinicalData&apos;].length; index++) {
	    		createSegment(&apos;OBX&apos;, xMessage,index);
			xMessage.OBX[index][&apos;OBX.1&apos;]  			= index; //1-Set ID - Patient ID
			xMessage.OBX[index][&apos;OBX.2&apos;]  			= &apos;ST&apos;; //1-Set ID - Patient ID
			xMessage.OBX[index][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;]		= xInput[&apos;clinicalData&apos;][index].code;// MLCode 
	        	xMessage.OBX[index][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;]		= xInput[&apos;clinicalData&apos;][index].itemName;//Problem Name
	        	
             	switch (xInput[&apos;clinicalData&apos;][index].value) {
                 case &apos;Y&apos;:
                     xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]		= &apos;yes&apos;;//Value
                     break;
                 case &apos;N&apos;:
                     xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]		= &apos;no&apos;;//Value
                     break;
                 case &apos; &apos;:
                     xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]		= &apos;yes&apos;;//Value
                     break;
                 default:
                    if(&apos;itemPrefix&apos; in xInput[&apos;clinicalData&apos;][index])
                 {
                    xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]=xInput[&apos;clinicalData&apos;][index].itemPrefix!=&apos;&apos;?xInput[&apos;clinicalData&apos;][index].itemPrefix+&apos; &apos;+formatter(xInput[&apos;clinicalData&apos;][index].value,&quot;FORMATHL7STRING&quot;):formatter(xInput[&apos;clinicalData&apos;][index].value,&quot;FORMATHL7STRING&quot;);
                 }
                 else
                 {
                 	xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]           = formatter(xInput[&apos;clinicalData&apos;][index].value,&quot;FORMATHL7STRING&quot;);	
                 }
	          }	
	        	//xMessage.OBX[index][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]		= xInput[&apos;clinicalData&apos;][index].value;//Value
			xMessage.OBX[index][&apos;OBX.6&apos;][&apos;OBX.6.1&apos;]		= &apos;&apos;;//Units
			//if (HistoryItems[0].toString() == &apos;MLI-17276&apos;)
			//	tmp[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.1&apos;]=&apos;yr&apos;;
			xMessage.OBX[index][&apos;OBX.11&apos;]				= &apos;F&apos;;
			xMessage.OBX[index][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;]	= xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];//Observation Date time
		}
	}

	if(methodName.toUpperCase() == &apos;DOCUMENTSUPDATE&apos;)
	{
		createSegment(&apos;TXA&apos;, xMessage);
		xMessage.TXA[&apos;TXA.1&apos;]			=	&apos;1&apos;;
		xMessage.TXA[&apos;TXA.2&apos;]			=	&apos;ZZ&apos;;
		xMessage.TXA[&apos;TXA.3&apos;]			=	&apos;TX&apos;;
		xMessage.TXA[&apos;TXA.4&apos;]			=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];
		xMessage.TXA[&apos;TXA.17&apos;]			=	&apos;AU&apos;;
		xMessage.TXA[&apos;TXA.22&apos;][&apos;TXA.22.1&apos;]	=	oHeader.OBR16;
		xMessage.TXA[&apos;TXA.22&apos;][&apos;TXA.22.15&apos;]=	xInput[&apos;patientData&apos;][&apos;messageDTTM&apos;];

		createSegment(&apos;OBX&apos;, xMessage);
		xMessage.OBX[&apos;OBX.1&apos;]			=	&apos;1&apos;;
		xMessage.OBX[&apos;OBX.3&apos;]			=	&apos;TEXT_REF&apos;;
		xMessage.OBX[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]	=	xInput[&apos;documentData&apos;][&apos;destinationFilePath&apos;] + &apos;\\&apos; + xInput[&apos;documentData&apos;][&apos;fileName&apos;];
		xMessage.OBX[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;]	=	xInput[&apos;documentData&apos;][&apos;displayName&apos;];
	}

    return xMessage;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>0fb475f8-5910-48ce-b557-dc74345e95d9</id>
            <name>Credentials</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658806</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns Credentials based on the client identifiers, version, and environment supplied.
	CAUTION : Values to be added in the configuration Map and not in this function. This function
	only returns credentials.

	
	@param {String} clientAbbreviation - 
	@param {String} version - 
	@param {String} environment - 
	@return {Object} Credentials object. 
*/
/*
function returnCredentials(clientAbbreviation, version, environment) {
   
    sURL = clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_URL&apos;; //GECPS_6.2_DEV_URL
    sOrganizationID = clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_ORGID&apos;; //GECPS_6.2_DEV_ORGID
    oCredentials = new Object();
    oCredentials.URL = configurationMap.get(sURL);
    oCredentials.OrganizationID = configurationMap.get(sOrganizationID);
    oCredentials.DBUsername = configurationMap.get(&apos;DBUsername&apos;);
    oCredentials.DBPassword = configurationMap.get(&apos;DBPassword&apos;);
    return oCredentials;

}

*/
function returnCredentials(clientAbbreviation, version, environment) {
   
    sURL = clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_DBURL&apos;; //GECPS_6.2_DEV_URL
    sOrganizationID = clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_DBORGID&apos;; //GECPS_6.2_DEV_ORGID
    sDBUsername =clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_DBUsername&apos;;//GECPS_6.2_DEV_DBUsername
    sDBPassword =clientAbbreviation + &apos;_&apos; + version + &apos;_&apos; + environment + &apos;_DBPassword&apos;;//GECPS_6.2_DEV_DEV_DBPassword
    oCredentials = new Object();
    encsURL=&apos;&apos;+configurationMap.get(sURL)+&apos;&apos;;//encrypet URL
    encsOrganizationID=&apos;&apos;+configurationMap.get(sOrganizationID)+&apos;&apos;;//encrypted Organization ID
    encsDBUsername=&apos;&apos;+configurationMap.get(sDBUsername)+&apos;&apos;;//encrypted database username
    encsDBPassword=&apos;&apos;+configurationMap.get(sDBPassword)+&apos;&apos;;//encrypted database password
    oCredentials.URL =DecryptData(encsURL);
    oCredentials.OrganizationID = DecryptData(encsOrganizationID);
    oCredentials.DBUsername = DecryptData(encsDBUsername);
    oCredentials.DBPassword = DecryptData(encsDBPassword);
    return oCredentials;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>835bfd35-0973-4c6b-8483-5d2c8f1c7053</id>
            <name>Crypto JS</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658760</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} encryptedData - 
	@return {Any} 
*/
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&amp;&amp;c.mixIn(a);c.hasOwnProperty(&quot;init&quot;)||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&amp;&amp;(this[c]=a[c]);a.hasOwnProperty(&quot;toString&quot;)&amp;&amp;(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
r=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k&lt;a;k++)c[j+k&gt;&gt;&gt;2]|=(e[k&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(k%4)&amp;255)&lt;&lt;24-8*((j+k)%4);else if(65535&lt;e.length)for(k=0;k&lt;a;k+=4)c[j+k&gt;&gt;&gt;2]=e[k&gt;&gt;&gt;2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c&gt;&gt;&gt;2]&amp;=4294967295&lt;&lt;
32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e&lt;a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j&lt;a;j++){var k=c[j&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(j%4)&amp;255;e.push((k&gt;&gt;&gt;4).toString(16));e.push((k&amp;15).toString(16))}return e.join(&quot;&quot;)},parse:function(a){for(var c=a.length,e=[],j=0;j&lt;c;j+=2)e[j&gt;&gt;&gt;3]|=parseInt(a.substr(j,
2),16)&lt;&lt;24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j&lt;a;j++)e.push(String.fromCharCode(c[j&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(j%4)&amp;255));return e.join(&quot;&quot;)},parse:function(a){for(var c=a.length,e=[],j=0;j&lt;c;j++)e[j&gt;&gt;&gt;2]|=(a.charCodeAt(j)&amp;255)&lt;&lt;24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error(&quot;Malformed UTF-8 data&quot;);}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},
q=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){&quot;string&quot;==typeof a&amp;&amp;(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q&lt;a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&amp;&amp;this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,
e)).finalize(b)}}});var n=d.algo={};return d}(Math);
(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r&lt;p;r+=3)for(var w=(l[r&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(r%4)&amp;255)&lt;&lt;16|(l[r+1&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*((r+1)%4)&amp;255)&lt;&lt;8|l[r+2&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*((r+2)%4)&amp;255,v=0;4&gt;v&amp;&amp;r+0.75*v&lt;p;v++)d.push(t.charAt(w&gt;&gt;&gt;6*(3-v)&amp;63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join(&quot;&quot;)},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&amp;&amp;(t=d.indexOf(t),-1!=t&amp;&amp;(l=t));for(var t=[],r=0,w=0;w&lt;
l;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))&lt;&lt;2*(w%4),b=s.indexOf(d.charAt(w))&gt;&gt;&gt;6-2*(w%4);t[r&gt;&gt;&gt;2]|=(v|b)&lt;&lt;24-8*(r%4);r++}return p.create(t,r)},_map:&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;}})();
(function(u){function p(b,n,a,c,e,j,k){b=b+(n&amp;a|~n&amp;c)+e+k;return(b&lt;&lt;j|b&gt;&gt;&gt;32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&amp;c|a&amp;~c)+e+k;return(b&lt;&lt;j|b&gt;&gt;&gt;32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b&lt;&lt;j|b&gt;&gt;&gt;32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b&lt;&lt;j|b&gt;&gt;&gt;32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64&gt;x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(q,n){for(var a=0;16&gt;a;a++){var c=n+a,e=q[c];q[c]=(e&lt;&lt;8|e&gt;&gt;&gt;24)&amp;16711935|(e&lt;&lt;24|e&gt;&gt;&gt;8)&amp;4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),
f=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,
m,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,
E,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c&gt;&gt;&gt;5]|=128&lt;&lt;24-c%32;var e=u.floor(a/
4294967296);n[(c+64&gt;&gt;&gt;9&lt;&lt;4)+15]=(e&lt;&lt;8|e&gt;&gt;&gt;24)&amp;16711935|(e&lt;&lt;24|e&gt;&gt;&gt;8)&amp;4278255360;n[(c+64&gt;&gt;&gt;9&lt;&lt;4)+14]=(a&lt;&lt;8|a&gt;&gt;&gt;24)&amp;16711935|(a&lt;&lt;24|a&gt;&gt;&gt;8)&amp;4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4&gt;a;a++)c=n[a],n[a]=(c&lt;&lt;8|c&gt;&gt;&gt;24)&amp;16711935|(c&lt;&lt;24|c&gt;&gt;&gt;8)&amp;4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);
(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length&lt;q;){n&amp;&amp;s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a&lt;p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,
l)}})();
CryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},
finalize:function(e){e&amp;&amp;this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return(&quot;string&quot;==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return(&quot;string&quot;==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d&lt;b;d++)e[a+d]^=
c[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,
e,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c&lt;&lt;24|c&lt;&lt;16|c&lt;&lt;8|c,l=[],n=0;n&lt;c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1&gt;&gt;&gt;2]&amp;255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,
this,b&amp;&amp;b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,
1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&amp;&amp;1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},
decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return&quot;string&quot;==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,
b.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();
(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256&gt;c;c++)a[c]=128&gt;c?c&lt;&lt;1:c&lt;&lt;1^283;for(var e=0,j=0,c=0;256&gt;c;c++){var k=j^j&lt;&lt;1^j&lt;&lt;2^j&lt;&lt;3^j&lt;&lt;4,k=k&gt;&gt;&gt;8^k&amp;255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y&lt;&lt;24|y&gt;&gt;&gt;8;r[e]=y&lt;&lt;16|y&gt;&gt;&gt;16;w[e]=y&lt;&lt;8|y&gt;&gt;&gt;24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y&lt;&lt;24|y&gt;&gt;&gt;8;x[k]=y&lt;&lt;16|y&gt;&gt;&gt;16;q[k]=y&lt;&lt;8|y&gt;&gt;&gt;24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,
16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j&lt;a;j++)if(j&lt;d)e[j]=c[j];else{var k=e[j-1];j%d?6&lt;d&amp;&amp;4==j%d&amp;&amp;(k=l[k&gt;&gt;&gt;24]&lt;&lt;24|l[k&gt;&gt;&gt;16&amp;255]&lt;&lt;16|l[k&gt;&gt;&gt;8&amp;255]&lt;&lt;8|l[k&amp;255]):(k=k&lt;&lt;8|k&gt;&gt;&gt;24,k=l[k&gt;&gt;&gt;24]&lt;&lt;24|l[k&gt;&gt;&gt;16&amp;255]&lt;&lt;16|l[k&gt;&gt;&gt;8&amp;255]&lt;&lt;8|l[k&amp;255],k^=H[j/d|0]&lt;&lt;24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d&lt;a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4&gt;d||4&gt;=j?k:b[l[k&gt;&gt;&gt;24]]^x[l[k&gt;&gt;&gt;16&amp;255]]^q[l[k&gt;&gt;&gt;
8&amp;255]]^n[l[k&amp;255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r&lt;m;r++)var q=d[g&gt;&gt;&gt;24]^e[h&gt;&gt;&gt;16&amp;255]^j[k&gt;&gt;&gt;8&amp;255]^l[n&amp;255]^c[p++],s=d[h&gt;&gt;&gt;24]^e[k&gt;&gt;&gt;16&amp;255]^j[n&gt;&gt;&gt;8&amp;255]^l[g&amp;255]^c[p++],t=
d[k&gt;&gt;&gt;24]^e[n&gt;&gt;&gt;16&amp;255]^j[g&gt;&gt;&gt;8&amp;255]^l[h&amp;255]^c[p++],n=d[n&gt;&gt;&gt;24]^e[g&gt;&gt;&gt;16&amp;255]^j[h&gt;&gt;&gt;8&amp;255]^l[k&amp;255]^c[p++],g=q,h=s,k=t;q=(f[g&gt;&gt;&gt;24]&lt;&lt;24|f[h&gt;&gt;&gt;16&amp;255]&lt;&lt;16|f[k&gt;&gt;&gt;8&amp;255]&lt;&lt;8|f[n&amp;255])^c[p++];s=(f[h&gt;&gt;&gt;24]&lt;&lt;24|f[k&gt;&gt;&gt;16&amp;255]&lt;&lt;16|f[n&gt;&gt;&gt;8&amp;255]&lt;&lt;8|f[g&amp;255])^c[p++];t=(f[k&gt;&gt;&gt;24]&lt;&lt;24|f[n&gt;&gt;&gt;16&amp;255]&lt;&lt;16|f[g&gt;&gt;&gt;8&amp;255]&lt;&lt;8|f[h&amp;255])^c[p++];n=(f[n&gt;&gt;&gt;24]&lt;&lt;24|f[g&gt;&gt;&gt;16&amp;255]&lt;&lt;16|f[h&gt;&gt;&gt;8&amp;255]&lt;&lt;8|f[k&amp;255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();


/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(g,j){var e={},d=e.lib={},m=function(){},n=d.Base={extend:function(a){m.prototype=this;var c=new m;a&amp;&amp;c.mixIn(a);c.hasOwnProperty(&quot;init&quot;)||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&amp;&amp;(this[c]=a[c]);a.hasOwnProperty(&quot;toString&quot;)&amp;&amp;(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
q=d.WordArray=n.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=j?c:4*a.length},toString:function(a){return(a||l).stringify(this)},concat:function(a){var c=this.words,p=a.words,f=this.sigBytes;a=a.sigBytes;this.clamp();if(f%4)for(var b=0;b&lt;a;b++)c[f+b&gt;&gt;&gt;2]|=(p[b&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(b%4)&amp;255)&lt;&lt;24-8*((f+b)%4);else if(65535&lt;p.length)for(b=0;b&lt;a;b+=4)c[f+b&gt;&gt;&gt;2]=p[b&gt;&gt;&gt;2];else c.push.apply(c,p);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c&gt;&gt;&gt;2]&amp;=4294967295&lt;&lt;
32-8*(c%4);a.length=g.ceil(c/4)},clone:function(){var a=n.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b&lt;a;b+=4)c.push(4294967296*g.random()|0);return new q.init(c,a)}}),b=e.enc={},l=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],f=0;f&lt;a;f++){var d=c[f&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(f%4)&amp;255;b.push((d&gt;&gt;&gt;4).toString(16));b.push((d&amp;15).toString(16))}return b.join(&quot;&quot;)},parse:function(a){for(var c=a.length,b=[],f=0;f&lt;c;f+=2)b[f&gt;&gt;&gt;3]|=parseInt(a.substr(f,
2),16)&lt;&lt;24-4*(f%8);return new q.init(b,c/2)}},k=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],f=0;f&lt;a;f++)b.push(String.fromCharCode(c[f&gt;&gt;&gt;2]&gt;&gt;&gt;24-8*(f%4)&amp;255));return b.join(&quot;&quot;)},parse:function(a){for(var c=a.length,b=[],f=0;f&lt;c;f++)b[f&gt;&gt;&gt;2]|=(a.charCodeAt(f)&amp;255)&lt;&lt;24-8*(f%4);return new q.init(b,c)}},h=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(k.stringify(a)))}catch(b){throw Error(&quot;Malformed UTF-8 data&quot;);}},parse:function(a){return k.parse(unescape(encodeURIComponent(a)))}},
u=d.BufferedBlockAlgorithm=n.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){&quot;string&quot;==typeof a&amp;&amp;(a=h.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var b=this._data,d=b.words,f=b.sigBytes,l=this.blockSize,e=f/(4*l),e=a?g.ceil(e):g.max((e|0)-this._minBufferSize,0);a=e*l;f=g.min(4*a,f);if(a){for(var h=0;h&lt;a;h+=l)this._doProcessBlock(d,h);h=d.splice(0,a);b.sigBytes-=f}return new q.init(h,f)},clone:function(){var a=n.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});d.Hasher=u.extend({cfg:n.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){u.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&amp;&amp;this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,d){return(new a.init(d)).finalize(b)}},_createHmacHelper:function(a){return function(b,d){return(new w.HMAC.init(a,
d)).finalize(b)}}});var w=e.algo={};return e}(Math);
(function(){var g=CryptoJS,j=g.lib,e=j.WordArray,d=j.Hasher,m=[],j=g.algo.SHA1=d.extend({_doReset:function(){this._hash=new e.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(d,e){for(var b=this._hash.words,l=b[0],k=b[1],h=b[2],g=b[3],j=b[4],a=0;80&gt;a;a++){if(16&gt;a)m[a]=d[e+a]|0;else{var c=m[a-3]^m[a-8]^m[a-14]^m[a-16];m[a]=c&lt;&lt;1|c&gt;&gt;&gt;31}c=(l&lt;&lt;5|l&gt;&gt;&gt;27)+j+m[a];c=20&gt;a?c+((k&amp;h|~k&amp;g)+1518500249):40&gt;a?c+((k^h^g)+1859775393):60&gt;a?c+((k&amp;h|k&amp;g|h&amp;g)-1894007588):c+((k^h^
g)-899497514);j=g;g=h;h=k&lt;&lt;30|k&gt;&gt;&gt;2;k=l;l=c}b[0]=b[0]+l|0;b[1]=b[1]+k|0;b[2]=b[2]+h|0;b[3]=b[3]+g|0;b[4]=b[4]+j|0},_doFinalize:function(){var d=this._data,e=d.words,b=8*this._nDataBytes,l=8*d.sigBytes;e[l&gt;&gt;&gt;5]|=128&lt;&lt;24-l%32;e[(l+64&gt;&gt;&gt;9&lt;&lt;4)+14]=Math.floor(b/4294967296);e[(l+64&gt;&gt;&gt;9&lt;&lt;4)+15]=b;d.sigBytes=4*e.length;this._process();return this._hash},clone:function(){var e=d.clone.call(this);e._hash=this._hash.clone();return e}});g.SHA1=d._createHelper(j);g.HmacSHA1=d._createHmacHelper(j)})();
(function(){var g=CryptoJS,j=g.enc.Utf8;g.algo.HMAC=g.lib.Base.extend({init:function(e,d){e=this._hasher=new e.init;&quot;string&quot;==typeof d&amp;&amp;(d=j.parse(d));var g=e.blockSize,n=4*g;d.sigBytes&gt;n&amp;&amp;(d=e.finalize(d));d.clamp();for(var q=this._oKey=d.clone(),b=this._iKey=d.clone(),l=q.words,k=b.words,h=0;h&lt;g;h++)l[h]^=1549556828,k[h]^=909522486;q.sigBytes=b.sigBytes=n;this.reset()},reset:function(){var e=this._hasher;e.reset();e.update(this._iKey)},update:function(e){this._hasher.update(e);return this},finalize:function(e){var d=
this._hasher;e=d.finalize(e);d.reset();return d.finalize(this._oKey.clone().concat(e))}})})();
(function(){var g=CryptoJS,j=g.lib,e=j.Base,d=j.WordArray,j=g.algo,m=j.HMAC,n=j.PBKDF2=e.extend({cfg:e.extend({keySize:4,hasher:j.SHA1,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(e,b){for(var g=this.cfg,k=m.create(g.hasher,e),h=d.create(),j=d.create([1]),n=h.words,a=j.words,c=g.keySize,g=g.iterations;n.length&lt;c;){var p=k.update(b).finalize(j);k.reset();for(var f=p.words,v=f.length,s=p,t=1;t&lt;g;t++){s=k.finalize(s);k.reset();for(var x=s.words,r=0;r&lt;v;r++)f[r]^=x[r]}h.concat(p);
a[0]++}h.sigBytes=4*c;return h}});g.PBKDF2=function(d,b,e){return n.create(e).compute(d,b)}})();


//Decrypt Function
function DecryptData(encryptedData)
{            
	var decryptedText = null;
	try {
		//Creating the Vector Key
		var iv = CryptoJS.enc.Hex.parse(&apos;6578616d706c65206865782064617461&apos;); // a5s8d2e9c1721ae0e84ad660c472y1f3
		//Encoding the Password in from UTF8 to byte array
		var Pass = CryptoJS.enc.Utf8.parse(&apos;secretpassphrase&apos;);
		//Encoding the Salt in from UTF8 to byte array
		var Salt = CryptoJS.enc.Utf8.parse(&quot;He@lt#@syst&quot;);
		//Creating the key in PBKDF2 format to be used during the decryption
		//var key128Bits1000Iterations = CryptoJS.PBKDF2(Pass.toString(CryptoJS.enc.Utf8), Salt, { keySize: 128 / 32, iterations: 1000 });
		var key128Bits1000Iterations = CryptoJS.PBKDF2(Pass.toString(CryptoJS.enc.Utf8), Salt, { keySize: 128 / 32, iterations: 1 });
		//Enclosing the test to be decrypted in a CipherParams object as supported by the CryptoJS libarary
		var cipherParams = CryptoJS.lib.CipherParams.create({
			ciphertext: CryptoJS.enc.Base64.parse(encryptedData)
		});

		//Decrypting the string contained in cipherParams using the PBKDF2 key
		var decrypted = CryptoJS.AES.decrypt(cipherParams, key128Bits1000Iterations, { mode: CryptoJS.mode.CBC, iv: iv, padding: CryptoJS.pad.Pkcs7 });
		decryptedText = decrypted.toString(CryptoJS.enc.Utf8);
		return decryptedText;
	}
	//Malformed UTF Data due to incorrect password
	catch (err) {
		return &quot;&quot;;
	}
}

//Encrypt Function
function EncryptData(plaintext) {
    try {
        //If type of paintext is not a string convert into one
        if (typeof plaintext !== &apos;string&apos;) {
            plaintext = plaintext.toString();
        }
        //Creating the Vector Key
        var iv = CryptoJS.enc.Hex.parse(&apos;6578616d706c65206865782064617461&apos;);
        //Encoding the Password in from UTF8 to byte array
        var Pass = CryptoJS.enc.Utf8.parse(&apos;secretpassphrase&apos;); //secretpassphrase
        //Encoding the Salt in from UTF8 to byte array
        var Salt = CryptoJS.enc.Utf8.parse(&quot;He@lt#@syst&quot;);
        //Creating the key in PBKDF2 format to be used during the encryption
        //var key128Bits1000Iterations = CryptoJS.PBKDF2(Pass.toString(CryptoJS.enc.Utf8), Salt, { keySize: 128 / 32, iterations: 1000 });
        var key128Bits1000Iterations = CryptoJS.PBKDF2(Pass.toString(CryptoJS.enc.Utf8), Salt, { keySize: 128 / 32, iterations: 1 });

        //Encrypting the string contained in cipherParams using the PBKDF2 key
        var encrypted = CryptoJS.AES.encrypt(plaintext, key128Bits1000Iterations, { mode: CryptoJS.mode.CBC, iv: iv, padding: CryptoJS.pad.Pkcs7 });
        return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
    }
    //Malformed UTF Data due to incorrect password
    catch (err) {
        return &quot;&quot;;
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>29affa90-50de-4abd-a25a-5ffb88c87c2f</id>
            <name>DataSet</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658698</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns Query Parameters for the Stored Procedures to be called. Works on both DB extracted result set, 
	inbound recieved HL7 ADT and SIU messages.

	@param {XML} xInput - XML of result set. msg for HL7 messages.
	@param {String} sMode - DB or HL7 only.
	@param {Object} oConfig - 
	@return {Object} 
*/
function returnInsertingDataset(xInput, sMode, oConfig) {
    //default xml namespace = &apos;&apos;;
    oDataSet = new Object();
    oParameterList = new Object();
    oDemographics = new Object();
    switch (sMode) {
        case &apos;DB&apos;:
            {
            	 messageType = xInput.msh_messagetype.toString();
            	 logger.info(&apos;messageType&apos;+messageType)
            	 aPIDList = new Array(); //Array list for demographics
            	 if(xInput.pid_race1.toString() == xInput.pid_race2.toString())
            	 	race= xInput.pid_race1.toString()
            	 else 
            	  race= xInput.pid_race1.toString() + &apos;$!&apos; + xInput.pid_race2.toString()
                
                if (xInput.pid_patientid.toString() != &apos;&apos;) aPIDList.push(xInput.pid_patientid.toString()); //PatientID
                else throw &apos;patient ID not found. Aborting.&apos;;
                if (xInput.pid_otherid.toString() != &apos;&apos;) aPIDList.push(xInput.pid_otherid.toString());//Patient OtherID
                else throw &apos;patient Other ID not found. Aborting.&apos;;
                //aInfo=new Array();
                //aInfo.push(&quot;Patient Information recieved&quot;);
                	
                aPIDList.push(xInput.pid_firstname.toString());//Patient First Name
                aPIDList.push(xInput.pid_mname.toString());//Patient Midle Name
                aPIDList.push(xInput.pid_lastname.toString());//Patient Last Name
                aPIDList.push(xInput.pid_suffix.toString());//Pateint suffix
                aPIDList.push(xInput.pid_defaddress1.toString());//Patient address 1
                aPIDList.push(xInput.pid_defaddress2.toString());//Patient address 2
                aPIDList.push(xInput.pid_defcity.toString());//Patient City
                aPIDList.push(xInput.pid_defstate.toString());//Patient State
                aPIDList.push(xInput.pid_defzip.toString());//Patient ZIP
                aPIDList.push(xInput.pid_defcountry.toString());//Patient Country
                aPIDList.push(xInput.pid_ssnnumber.toString());//Patient SSN
                aPIDList.push(catalogueMaps(xInput.pid_sex.toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));//Patient Gender
                aPIDList.push(formatter(xInput.pid_date_timeofbirth.toString(), &apos;DOB&apos;));//Patient DOB
                aPIDList.push(catalogueMaps(xInput.pid_maritalstatus.toString(), &apos;MARITALSTATUS&apos;,&apos;inboundMaps&apos;));//Patient Marital status
                aPIDList.push(xInput.pid_homephonenumber.toString());//Patient Home phone
                aPIDList.push(xInput.pid_businessphonenumber.toString());//Patient business phone
                aPIDList.push(xInput.pid_businessphoneextn.toString());//patient business phone extension
                aPIDList.push(xInput.pid_personalemail.toString());//Patient email id
                aPIDList.push(xInput.pidpatientdeathindicator.toString());//Patient death indicator
                aPIDList.push(xInput.pidprimarylanguage.toString());//Patient Language
                aPIDList.push(xInput.pidpatientaccountnumber.toString());//Patient Account Number
                aPIDList.push(xInput.piddefcountrycounty.toString());//Patient def county
                aPIDList.push(xInput.pidhomephonecode.toString());//patient home phone code
                aPIDList.push(xInput.pidbusinessphonecode.toString());//patient business phone code
                aPIDList.push(race);//Patient race
                aPIDList.push(xInput.pid_ethnicgroup.toString());//Patient ethnic group
                aPIDList.push(xInput.pid_picture.toString());//Patient picture
                aPIDList.push(xInput.pid_contactby.toString());//patient prefered contact
			 
                oParameterList.Demographics = aPIDList;
                oDataSet.info = &quot;Patient Demographics Info processed. \n&quot;;	
                if(messageType.indexOf(&quot;ADT&quot;)!=-1)
                {
                	 aPIDExtendedList=new Array();//Array list for extended demographics	
                	 aPIDExtendedList.push(xInput.pid_patientid.toString()); //PatientID
                	 aPIDExtendedList.push(xInput.pid_otherid.toString()); //Patient OtherID
                	 aPIDExtendedList.push(&apos;A08&apos;); //Event code
                	 aPIDExtendedList.push(xInput.msh_date_timeofmessage.toString());//Message generated datetime
                	 aPIDExtendedList.push(&apos;&apos;);//Merge ID
                	 aPIDExtendedList.push(&apos;&apos;);//Patient addition demographic id
                	 aPIDExtendedList.push(&apos;&apos;);//Family name
                	 aPIDExtendedList.push(&apos;&apos;);//Given Name
                	 aPIDExtendedList.push(&apos;&apos;);//Second name
                	 aPIDExtendedList.push(&apos;&apos;);//Suffix
                	 aPIDExtendedList.push(&apos;&apos;);//prefix
                	 aPIDExtendedList.push(&apos;&apos;);//NK1 Set id
                	 aPIDExtendedList.push(&apos;&apos;);//NK1 Family Name
                	 aPIDExtendedList.push(&apos;&apos;);//Given name
                	 aPIDExtendedList.push(&apos;&apos;);//Second name
                	 aPIDExtendedList.push(&apos;&apos;);//Suffix
                	 aPIDExtendedList.push(&apos;&apos;);//Prefix
                	 aPIDExtendedList.push(&apos;&apos;);//Namespace ID
                	 aPIDExtendedList.push(&apos;&apos;);//PV1 Code code value
                	 aPIDExtendedList.push(&apos;&apos;);//PV1 ID
                	 aPIDExtendedList.push(&apos;&apos;);//Family name
                	 aPIDExtendedList.push(&apos;&apos;);//Given name
                	 aPIDExtendedList.push(&apos;&apos;);//Second name
                	 aPIDExtendedList.push(&apos;&apos;);//Suffix
                	 aPIDExtendedList.push(&apos;&apos;);//Prefix
                	 aPIDExtendedList.push(&apos;&apos;);//OBX Remark
                	 aPIDExtendedList.push(&apos;&apos;);//OBX Accoun number
                	 aPIDExtendedList.push(&apos;&apos;);//OBX State
                	 aPIDExtendedList.push(&apos;&apos;);//Patient Height
                	 aPIDExtendedList.push(&apos;&apos;);//Weight
                	 aPIDExtendedList.push(&apos;&apos;);//DiabetesMellitus
                	 aPIDExtendedList.push(&apos;&apos;);//Smoker
                	 aPIDExtendedList.push(&apos;&apos;);//Allergy Value
                	 aPIDExtendedList.push(&apos;&apos;);//Height units
                	 aPIDExtendedList.push(&apos;&apos;);//Weight Units
                	 aPIDExtendedList.push(&apos;&apos;);//Primary Insurance policy number
                	 aPIDExtendedList.push(&apos;&apos;);//Company ID
                	 aPIDExtendedList.push(&apos;&apos;);//Company Name
                	 aPIDExtendedList.push(xInput.in1_effdateprimary.toString());//Primary insurance start date
                	 aPIDExtendedList.push(xInput.in1_expdateprimary.toString());//primary insurance expairy date
                	 aPIDExtendedList.push(&apos;&apos;);//Scondary insurance policy number
                	 aPIDExtendedList.push(&apos;&apos;);//Company id
                	 aPIDExtendedList.push(&apos;&apos;);//company name
                	 aPIDExtendedList.push(xInput.adt_in1effdatesecondary.toString());//secondary insurance start date
                	 aPIDExtendedList.push(xInput.adt_in1expdatesecondary.toString());//secondary insurance end date
                	 aPIDExtendedList.push(xInput.adt_in1insurancename.toString());//Primary insurance name
                	 aPIDExtendedList.push(xInput.adt_in1phonenumber.toString());//Phone number
                	 aPIDExtendedList.push(xInput.ins_subscriberfirstname.toString()+&apos; &apos;+xInput.ins_subscribermiddlename.toString()+&apos; &apos;+xInput.ins_subscriberlastname.toString());//policy holder name (Firstname Middlename Lastname)
                	 aPIDExtendedList.push(xInput.adt_in1policyholderdob.toString());//dob
                	 aPIDExtendedList.push(xInput.adt_in1policynumber.toString());//policy number
                	 aPIDExtendedList.push(xInput.adt_in1groupnumber.toString());//group number
                	 aPIDExtendedList.push(xInput.adt_in1relationship.toString());//relationship
                	 aPIDExtendedList.push(xInput.adt_in2insurancename.toString());//Secondary insurance name
                	 aPIDExtendedList.push(xInput.adt_in2phonenumber.toString());//phone number
                	 aPIDExtendedList.push(xInput.ins_in2subscriberfirstname.toString()+&apos; &apos;+xInput.ins_in2subscriberlastname.toString());//policy holder name
                	 aPIDExtendedList.push(xInput.adt_in2policyholderdob.toString());//dob
                	 aPIDExtendedList.push(xInput.adt_in2policynumber.toString());//policy number
                	 aPIDExtendedList.push(xInput.adt_in2groupnumber.toString());//group number
                	 aPIDExtendedList.push(xInput.adt_in2relationship.toString());//relationship
                	 aPIDExtendedList.push(xInput.adt_in3insurancename.toString());//Tertiary Insurance name
                	 aPIDExtendedList.push(xInput.adt_in3phonenumber.toString());//phone number
                	 aPIDExtendedList.push(xInput.ins_in3subscriberfirstname.toString()+&apos; &apos;+xInput.ins_in3subscriberlastname.toString());//policy holder name
                	 aPIDExtendedList.push(xInput.adt_in3policyholderdob.toString());//dob
                	 aPIDExtendedList.push(xInput.adt_in3policynumber.toString());//policy number
                	 aPIDExtendedList.push(xInput.adt_in3groupnumber.toString());//group number
                	 aPIDExtendedList.push(xInput.adt_in3relationship.toString());//relationship
                	 aPIDExtendedList.push(xInput.ins_coverageorder.toString());//insurance coverage order
                	 aPIDExtendedList.push(xInput.ins_ispolicyincoveragelist.toString());//coverage list
                	 aPIDExtendedList.push(xInput.adt_in1policynumber.toString());//policy number
                	 aPIDExtendedList.push(xInput.adt_in1groupnumber.toString());//group number
                	 aPIDExtendedList.push(xInput.ins_planid.toString());//planid
                	 aPIDExtendedList.push(xInput.ins_plancode.toString());//plan code
                	 aPIDExtendedList.push(xInput.ins_planname.toString());//plan name
                	 aPIDExtendedList.push(xInput.ins_carrierid.toString());//carrier id
                	 aPIDExtendedList.push(xInput.ins_carrierid.toString());//carrier code
                	 aPIDExtendedList.push(xInput.ins_carrierid.toString()+&apos;-&apos;+xInput.ins_carriername.toString());//carrier name
                	 aPIDExtendedList.push(xInput.adt_in1policynumber.toString());//policy number
                	 aPIDExtendedList.push(xInput.ins_subscriberfirstname.toString()+&apos; &apos;+xInput.ins_subscribermiddlename.toString()+&apos; &apos;+xInput.ins_subscriberlastname.toString());//policy holder name
                	 aPIDExtendedList.push(xInput.adt_in1policyholderdob.toString());//dob
                	 aPIDExtendedList.push(xInput.ins_subscribergendercode.toString());//policy holder gender code
                	 aPIDExtendedList.push(xInput.ins_subscribergendername.toString());//policy holder gender description
                	 aPIDExtendedList.push(xInput.ins_patientrelationtosubscribercode.toString());//relationship code
                	 aPIDExtendedList.push(xInput.adt_in1relationship.toString());//relationship description
                	 aPIDExtendedList.push(&apos;&apos;);//Provider speciality
                	 aPIDExtendedList.push(xInput.ins_subscriberfirstname.toString());//subscriber firstname
                	 aPIDExtendedList.push(xInput.ins_subscriberlastname.toString());//subscriber lastname
                	 aPIDExtendedList.push(xInput.ins_subscribermiddlename.toString());//subscriber middle name
                	 aPIDExtendedList.push(xInput.ins_subscribertitle.toString());//subsriber title
                	 aPIDExtendedList.push(xInput.ins_payerlookupid.toString());//payer lookup id
                	 aPIDExtendedList.push(xInput.adt_in2policynumber.toString());//Tertiary insurance number
                	 aPIDExtendedList.push(xInput.ins_in1compidtertiary.toString());//Company id
                	 aPIDExtendedList.push(xInput.ins_in2subscriberfirstname.toString());//secondary insurance subscriber firstname
                	 aPIDExtendedList.push(xInput.ins_in2subscriberlastname.toString());//last name
                	 aPIDExtendedList.push(xInput.ins_in2subscribergendercode.toString());//gender code
                	 aPIDExtendedList.push(xInput.ins_in3subscriberfirstname.toString());//Tertiary insurance subscriber firstname
                	 aPIDExtendedList.push(xInput.ins_in3subscriberlastname.toString());//last name
                	 aPIDExtendedList.push(xInput.ins_in3subscribergendercode.toString());//gendercode
                	 aPIDExtendedList.push(xInput.adt_pcplastname.toString());//PrimaryCareProvider lastname
                	 aPIDExtendedList.push(xInput.adt_pcpfirstname.toString());//PCP firstname
                	 aPIDExtendedList.push(xInput.adt_pcpmiddlename.toString());//PCP middle name
                	 aPIDExtendedList.push(xInput.adt_pcpsuffix.toString());//PCP suffix
                	 aPIDExtendedList.push(xInput.adt_pcpaddress1.toString());//PCP address1
                	 aPIDExtendedList.push(xInput.adt_pcpcity.toString());//PCP City
                	 aPIDExtendedList.push(xInput.adt_pcpstate.toString());//PCP State
                	 aPIDExtendedList.push(xInput.adt_pcpzip.toString());//PCP ZIP
                	 aPIDExtendedList.push(xInput.adt_pcpcountry.toString());// PCP Country
                	 aPIDExtendedList.push(xInput.adt_pcphomephone.toString());//PCP home phone
                	 aPIDExtendedList.push(xInput.adt_pcpbusinessphone.toString());//PCP business phone
                	 aPIDExtendedList.push(xInput.adt_pcprelationship.toString());//PCP Relationship
                	 aPIDExtendedList.push(xInput.adt_rfplastname.toString());//Referring Provider Last name
                	 aPIDExtendedList.push(xInput.adt_rfpfirstname.toString());//RFP first name
                	 aPIDExtendedList.push(xInput.adt_rfpmiddlename.toString());//RFP middle name
                	 aPIDExtendedList.push(xInput.adt_rfpsuffix.toString());//RFP suffix
                	 aPIDExtendedList.push(xInput.adt_rfpaddress1.toString());//RFP Address1
                	 aPIDExtendedList.push(xInput.adt_rfpcity.toString());//RFP City
                	 aPIDExtendedList.push(xInput.adt_rfpstate.toString());//RFP State
                	 aPIDExtendedList.push(xInput.adt_rfpzip.toString());//RFP ZIP
                	 aPIDExtendedList.push(xInput.adt_rfpcountry.toString());//RFP Country
                	 aPIDExtendedList.push(xInput.adt_rfphomephone.toString());//RFP Home phone
                	 aPIDExtendedList.push(xInput.adt_rfpbusinessphone.toString());//RFP Business phone
                	 aPIDExtendedList.push(xInput.adt_rfprelationship.toString());//RFP relationship
                	 aPIDExtendedList.push(xInput.adt_peclastname.toString());//Emergenct contact lastname
                	 aPIDExtendedList.push(xInput.adt_pecfirstname.toString());//first name
                	 aPIDExtendedList.push(xInput.adt_pecmiddlename.toString());//middle name
                	 aPIDExtendedList.push(xInput.adt_pecsuffix.toString());//suffix
                	 aPIDExtendedList.push(xInput.adt_pecaddress1.toString());//address 1
                	 aPIDExtendedList.push(xInput.adt_peccity.toString());//city
                	 aPIDExtendedList.push(xInput.adt_pecstate.toString());//state
                	 aPIDExtendedList.push(xInput.adt_peczip.toString());//ZIP
                	 aPIDExtendedList.push(xInput.adt_peccountry.toString());//country
                	 aPIDExtendedList.push(xInput.adt_pechomephone.toString());//home phone
                	 aPIDExtendedList.push(xInput.adt_pecbusinessphone.toString());//business phone
                	 aPIDExtendedList.push(xInput.adt_pecrelationship.toString());//relationship
                	 aPIDExtendedList.push(xInput.adt_employerid.toString());//Employer id
                	 aPIDExtendedList.push(xInput.adt_employername.toString());//Employer name
                	 aPIDExtendedList.push(xInput.adt_empoccupation.toString());//Occupation
                	 aPIDExtendedList.push(xInput.adt_empstatusdate.toString());//Employment status date
                	 aPIDExtendedList.push(xInput.adt_employmentstatus.toString());//Employment status
                	 aPIDExtendedList.push(xInput.adt_employerdetails.toString());//Employment details
                	  
                	  oParameterList.ExtendedDemographics = formatter(aPIDExtendedList,&apos;parameterlist&apos;);
                	  oDataSet.info += &quot;Patient extended demographic Info processed.&quot;;	

                }
                if (messageType.indexOf(&quot;SIU&quot;)!=-1) 
                {
                    aSIUList = new Array();
                    aSIUExtendedList=new Array();
                    aSIUAssessementList=new Array();
                    
                    aSIUList.push(xInput.pid_patientid.toString()); //PatientID
                	aSIUList.push(xInput.pid_otherid.toString()); //Patient OtherID
                	if (xInput.schplacerappointmentid.toString() != &apos;&apos;) aSIUList.push(xInput.schplacerappointmentid.toString()); //ApptID
                	else throw &apos;Appointment ID not found. Aborting.&apos;;
                    aSIUList.push(xInput.schfillerappointmentid.toString()); //SCHFAEntityID
                    aSIUList.push(xInput.schfanamespaceid.toString());//SCHFANamespaceID
                    aSIUList.push(xInput.schoccurrencenumber.toString());//SCHOccurenceNo
                    aSIUList.push(xInput.scheventreason.toString());//SCHEventReasonID
                    aSIUList.push(xInput.schappointmentreason.toString());//SCHARID
                    aSIUList.push(xInput.schartext.toString());//SCHARText
                    aSIUList.push(xInput.schatqstartdatetime.toString());//SCHATQStartDatetime
                    aSIUList.push(xInput.schatqenddatetime.toString());//SCHATQEndDatetime
                    aSIUList.push(&apos;&apos;);//SCHATQPriority
                    aSIUList.push(xInput.schplacercontactperson.toString());//SCHPCPID
                    aSIUList.push(xInput.schpcpfamilyname.toString());//SCHPCPFamilyName
                    aSIUList.push(xInput.schpcpgivenname.toString());//SCHPCPGivenName
                    aSIUList.push(xInput.schpcpsecondname.toString());//SCHPCPSecondName
                    aSIUList.push(xInput.schpcpsuffix.toString());//SCHPCPSuffix
                    aSIUList.push(xInput.schpcpprefix.toString());//SCHPCPPrefix
                    aSIUList.push(xInput.schplacercontactlocation.toString());//SCHPCLPointOfCare
                    aSIUList.push(xInput.schpcllocationdescription.toString());//SCHPCLLocationDescription
                    aSIUList.push(xInput.schfillercontactperson.toString());//SCHFCPID
                    aSIUList.push(xInput.schfillercontactlocation.toString());//SCHFCLPointOfCare
                    aSIUList.push(xInput.schfcllocationdescription.toString());//SCHFCLLocationDescription
                    aSIUList.push(xInput.schenteredbyperson.toString());//SCHEnteredByPersonID
                    aSIUList.push(xInput.schfillerstatuscode.toString());//SCHFillerStatusCodeID
                    aSIUList.push(xInput.scheventreasontext.toString());//SCHEventReasonText
                    aSIUList.push(xInput.schappointmenttypecode.toString());//SCHAppointmentTypeCode
                    aSIUList.push(xInput.schappointmenttypetext.toString());//SCHAppointmentTypeText
                    aSIUList.push(xInput.schplacerappointmentid.toString());//schplacerappointmentid
                    aSIUList.push(xInput.schpanamespaceid.toString());//Name space ID
                    aSIUList.push(xInput.schappointmentduration.toString());//Appointment duration
                    aSIUList.push(xInput.schappointmentdurationunits.toString());//Appointment duration units
                    aSIUList.push(xInput.schfcpfamilyname.toString());//schfcpfamilyname
                    aSIUList.push(xInput.schfcpgivenname.toString());//SCHFCPGivenName
                    aSIUList.push(xInput.schfcpsecondname.toString());//SCHFCPSecondName
                    aSIUList.push(xInput.schebpfamilyname.toString());//SCHEBPFamilyName
                    aSIUList.push(xInput.schebpgivenname.toString());//SCHEBPGivenName
                    aSIUList.push(xInput.schebpsecondname.toString());//SCHEBPSecondName
                                        
                    oParameterList.Schedule = aSIUList;

                    aSIUExtendedList.push(xInput.pid_patientid.toString()); //PatientID
                	aSIUExtendedList.push(xInput.pid_otherid.toString()); //Patient OtherID
                	aSIUExtendedList.push(xInput.schplacerappointmentid.toString()); //ApptID
                	aSIUExtendedList.push(xInput.siu_pv1patientclass.toString()); //SIU_PV1PatientClass
                	aSIUExtendedList.push(xInput.siu_pv1adid.toString()); //SIU_PV1ADID
                	aSIUExtendedList.push(xInput.siu_pv1lastname.toString()); //Provider LastName
                	aSIUExtendedList.push(xInput.siu_pv1firstname.toString()); //Provider FirstName
                	aSIUExtendedList.push(xInput.siu_pv1middlename.toString()); //Provider Middle name
                	aSIUExtendedList.push(xInput.siu_pv1suffix.toString()); //Provider Suffix
                	aSIUExtendedList.push(xInput.siu_pv1prefix.toString()); //Provider Prefix
                	aSIUExtendedList.push(xInput.siu_pv1mobility.toString()); //AmbulatoryStatus
                	aSIUExtendedList.push(xInput.siu_pv1patienttype.toString()); //PatientType
                	aSIUExtendedList.push(&apos;&apos;); //Observation Value
                	aSIUExtendedList.push(&apos;&apos;); //Observation Units
                	aSIUExtendedList.push(xInput.siu_examcode.toString()); //Exam code
                	aSIUExtendedList.push(xInput.siu_examdesc.toString()); //Exam Description
                	aSIUExtendedList.push(&apos;Department&apos;); //PointofCare
                	aSIUExtendedList.push(&apos;Department&apos;); //Description
                	aSIUExtendedList.push(xInput.siu_pv1assignedpatientlocation.toString()); //Location
                	aSIUExtendedList.push(xInput.siu_pv1room.toString()); //Room
                	aSIUExtendedList.push(&apos;&apos;); //Bed
                	aSIUExtendedList.push(xInput.siu_encounterid.toString()); //EncounterID
                	aSIUExtendedList.push(&apos;&apos;); //Height
                	aSIUExtendedList.push(&apos;&apos;); //Height Units
                	aSIUExtendedList.push(&apos;&apos;); //Account Number1
                	aSIUExtendedList.push(&apos;&apos;); //Account Number2
                	aSIUExtendedList.push(&apos;&apos;); //Billing 1
                	aSIUExtendedList.push(&apos;&apos;); //Billing 2
                	aSIUExtendedList.push(&apos;&apos;); //Scanner Available 1
                	aSIUExtendedList.push(&apos;&apos;); //Scanner avialable 2
                	aSIUExtendedList.push(&apos;&apos;); //BUN/CR 1
                	aSIUExtendedList.push(&apos;&apos;); //BUN/CR 2
                	aSIUExtendedList.push(xInput.siu_aiprefdoctorid.toString()); //Referring DocID
                	aSIUExtendedList.push(xInput.siu_aipreflastname.toString()); //Referring Doctor LastName
                	aSIUExtendedList.push(xInput.siu_aipreffirstname.toString()); //Referring Doctor FirstName
                	aSIUExtendedList.push(xInput.siu_aiprefmiddlename.toString()); //Referring Doctor MiddleName
                	aSIUExtendedList.push(xInput.siu_aipresdoctorid.toString()); //Resource Doctor ID 
                	aSIUExtendedList.push(xInput.siu_aipreslastname.toString()); //Resource Doctor LastName 
                	aSIUExtendedList.push(xInput.siu_aipresfirstname.toString()); //Resource Doctor FirstName
                	aSIUExtendedList.push(xInput.siu_aipresmiddlename.toString()); //Resource Doctor MiddleName
                	aSIUExtendedList.push(xInput.siu_aillocationid.toString()); //Location Type Code
                	aSIUExtendedList.push(xInput.siu_aillocationtypetext.toString()); //Location Type Text
                	aSIUExtendedList.push(xInput.siu_aillocationid.toString()); //Location Id
                	aSIUExtendedList.push(&apos;&apos;); //Pregnant flag
                	aSIUExtendedList.push(&apos;&apos;); //Valaue
                	aSIUExtendedList.push(&apos;&apos;);//Primary Insurance policy number
                	aSIUExtendedList.push(&apos;&apos;);//Company ID
                	aSIUExtendedList.push(&apos;&apos;);//Company Name
                	aSIUExtendedList.push(xInput.siu_in1effdateprimary.toString());//Primary insurance start date
                	aSIUExtendedList.push(xInput.siu_in1expdateprimary.toString());//primary insurance expairy date
                	aSIUExtendedList.push(&apos;&apos;);//Scondary insurance policy number
                	aSIUExtendedList.push(&apos;&apos;);//Company id
                	aSIUExtendedList.push(&apos;&apos;);//company name
                	aSIUExtendedList.push(xInput.siu_in1effdatesecondary.toString());//secondary insurance start date
                	aSIUExtendedList.push(xInput.siu_in1expdatesecondary.toString());//secondary insurance end date
                	aSIUExtendedList.push(xInput.adt_in1copay.toString()); //Insurance Copay
                	aSIUExtendedList.push(&apos;&apos;); //General Pay
                	aSIUExtendedList.push(xInput.siu_patientbalance.toString()); //Patient Balance
                	aSIUExtendedList.push(xInput.siu_in1compidprimary.toString()+&apos;-&apos;+xInput.siu_in1compnameprimary.toString()); //Primary insurance company name with ID
                	aSIUExtendedList.push(xInput.siu_in1phonenumber.toString()); //Phone number
                	aSIUExtendedList.push(xInput.ins_subscriberfirstname.toString()+&apos; &apos;+xInput.ins_subscribermiddlename.toString()+&apos; &apos;+xInput.ins_subscriberlastname.toString()); // Patient name(firstname middilename lastname)
                	aSIUExtendedList.push(xInput.siu_in1policyholderdob.toString()); //Policy Holder DOB
                	aSIUExtendedList.push(xInput.siu_in1policynumber.toString()); // Primary policy Number
                	aSIUExtendedList.push(xInput.siu_in1groupnumber.toString()); //Promary Policy Group number
                	aSIUExtendedList.push(xInput.siu_in1relationship.toString()); //relationship
                	aSIUExtendedList.push(xInput.siu_in1compnamesecondary.toString()); // Secondary Insurance company name
                	aSIUExtendedList.push(xInput.siu_in2phonenumber.toString()); //Phone number
                	aSIUExtendedList.push(xInput.siu_in2subscriberfirstname.toString()+&apos; &apos;+xInput.siu_in2subscriberlastname.toString()); //
                	aSIUExtendedList.push(xInput.siu_in2policyholderdob.toString()); //DOB
                	aSIUExtendedList.push(xInput.siu_in1policynosecondary.toString()); //secondary insurance policy number
                	aSIUExtendedList.push(xInput.siu_in2groupnumber.toString()); //Secondary insurance group number
                	aSIUExtendedList.push(xInput.siu_in2relationship.toString()); //Relationship
                	aSIUExtendedList.push(xInput.siu_in3insurancename.toString()); //Tertiary Insurance company name
                	aSIUExtendedList.push(xInput.siu_in3phonenumber.toString()); //Phone number
                	aSIUExtendedList.push(xInput.siu_in3subscriberfirstname.toString()+&apos; &apos;+xInput.siu_in3subscriberlastname.toString()); //Policy holder name
                	aSIUExtendedList.push(xInput.siu_in3policyholderdob.toString()); //DOB
                	aSIUExtendedList.push(xInput.siu_in3policynumber.toString()); //Policy number
                	aSIUExtendedList.push(xInput.siu_in3groupnumber.toString()); //group number
                	aSIUExtendedList.push(xInput.siu_in3relationship.toString()); //Relationship
                	aSIUExtendedList.push(&apos;&apos;); //Payment Collected
                	aSIUExtendedList.push(&apos;1&apos;); //Insurance coverage order  default 1
                	aSIUExtendedList.push(&apos;&apos;); //Insurance coverage list
                	aSIUExtendedList.push(xInput.siu_in1policynumber.toString()); // Primary policy Number
                	aSIUExtendedList.push(xInput.siu_in1groupnumber.toString()); //Promary Policy Group number
                	aSIUExtendedList.push(xInput.ins_planid.toString()); //Primary Insurance Planid
                	aSIUExtendedList.push(xInput.ins_plancode.toString()); //Primary Insurance plancode
                	aSIUExtendedList.push(xInput.ins_planname.toString()); //Plan name
                	aSIUExtendedList.push(xInput.siu_in1compidprimary.toString()); //Primary Insurance company ID
                	aSIUExtendedList.push(xInput.siu_in1compidprimary.toString()); //Primary Insurance company ID
                	aSIUExtendedList.push(xInput.siu_in1compidprimary.toString()+&apos;-&apos;+xInput.siu_in1compnameprimary.toString()); //Primary insurance company name with ID
                	aSIUExtendedList.push(xInput.siu_in1policynumber.toString()); // Primary policy Number
                	aSIUExtendedList.push(xInput.ins_subscriberfirstname.toString()+&apos; &apos;+xInput.ins_subscribermiddlename.toString()+&apos; &apos;+xInput.ins_subscriberlastname.toString()); // Patient name(firstname middilename lastname)
                	aSIUExtendedList.push(xInput.siu_in1policyholderdob.toString()); //Policy Holder DOB
                	aSIUExtendedList.push(xInput.ins_subscribergendercode.toString()); //Gender code
                	aSIUExtendedList.push(xInput.ins_subscribergendername.toString()); //Gender Name
                	aSIUExtendedList.push(xInput.siu_in1relationship.toString()); //Relationship code
                	aSIUExtendedList.push(xInput.siu_in1relationship.toString()); //Relationship description
                	aSIUExtendedList.push(&apos;&apos;); //Provider Speciality
                	aSIUExtendedList.push(xInput.ins_subscriberfirstname.toString()); //Subscriber firstname
                	aSIUExtendedList.push(xInput.ins_subscriberlastname.toString()); //subscriber lastname
                	aSIUExtendedList.push(xInput.ins_subscribermiddlename.toString()); //subscriber middle name
                	aSIUExtendedList.push(xInput.ins_subscribertitle.toString()); //Subscriber Title
                	aSIUExtendedList.push(&apos;&apos;); //Billable provider
                	aSIUExtendedList.push(&apos;&apos;); //Payer Lookup id
                	aSIUExtendedList.push(xInput.siu_in1policynosecondary.toString()); //secondary policy number
                	aSIUExtendedList.push(xInput.siu_in1compidsecondary.toString()); //secondary policy company id
                	aSIUExtendedList.push(xInput.siu_in2subscriberfirstname.toString()); //seconcodary insurance subscriber firstname
                	aSIUExtendedList.push(xInput.siu_in2subscriberlastname.toString()); //secondary insurance subscriber lastname
                	aSIUExtendedList.push(xInput.siu_in2subscribergendercode.toString()); //secondary insurance subscriber gender
                	aSIUExtendedList.push(xInput.siu_in3subscriberfirstname.toString()); //Tertiary insurance subscriber firstname
                	aSIUExtendedList.push(xInput.siu_in3subscriberlastname.toString()); //Tertiary insurance subscriber lastname
                	aSIUExtendedList.push(xInput.siu_in3subscribergendercode.toString()); //Tertiary insurance subscriber gender
                	aSIUExtendedList.push(xInput.pid_prefferedpharmacyname.toString() +&apos;,&apos;+
                					  xInput.pid_prefferedpharmacyaddress1.toString()+&apos;,&apos;+
                					  xInput.pid_prefferedpharmacyaddress2.toString()+&apos;,&apos;+
                					  xInput.pid_prefferedpharmacycity.toString()+&apos;,&apos;+
                					  xInput.pid_prefferedpharmacyzip.toString()); // Preferred pharmacy details 
                	aSIUExtendedList.push(xInput.siu_pv1attendingdoctorid.toString()); //Provider NPI
                	aSIUExtendedList.push(xInput.siu_aipreslistname.toString()); // Provider Listname
                	
                	oParameterList.ExtendedSchedule = aSIUExtendedList;

                	
                	if (xInput.problem_migraine.toString() != &apos;&apos;) aSIUAssessementList.push(&apos;Y&apos;); //Migrain value
                	else aSIUAssessementList.push(&apos;N&apos;);
                	if (xInput.problem_depressivedisorder.toString() != &apos;&apos;) aSIUAssessementList.push(&apos;Y&apos;); //Depressive disorder value
                	else aSIUAssessementList.push(&apos;N&apos;);
                	if (xInput.problem_anxietydisorder.toString() != &apos;&apos;) aSIUAssessementList.push(&apos;Y&apos;); //Anxietydisorder value
                	else aSIUAssessementList.push(&apos;N&apos;);
                	if (xInput.problem_bipolardisorder.toString() != &apos;&apos;) aSIUAssessementList.push(&apos;Y&apos;); //Bipolar disorder value
                	else aSIUAssessementList.push(&apos;N&apos;);
                	
				oParameterList.AssessmentSchedule = aSIUAssessementList;
                    
                }
                
                            
                oDataSet.parameterList = oParameterList; //=oDemographics;
                return oDataSet;
                //.TODO: Add full DataSet for Demographics
                //.TODO: Add Extended DataSet 


            }

        case &apos;HL7&apos;:
            {
                messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
                aPIDList = new Array();
                logs = &apos;&apos;;
                //Proxy
                msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;] = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()); //Gender
                aPIDList.push(formatter(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString(), &apos;DOB&apos;)); //DOB
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString()) //marital status
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString()); //HomePhone
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString()); //Business
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.4&apos;].toString()); //business Extension
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.27&apos;][&apos;PID.27.1&apos;].toString()); // Proxy placeholder for Email
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.5&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.5&apos;].toString());
                aPIDList.push(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString());
                oParameterList.Demographics = aPIDList;
                //.TODO: Add Extended Demographics Parsing here
                //.TODO :


                if (messageType == &apos;SIU&apos;) {
                    aSIUList = new Array();
                    aSIUList.push(catalogueMaps(&apos;S12&apos;, &apos;appointmentType&apos;));
                    oParameterList.Schedule = aSIUList;
                }
                oInfo = new Object();
                oInfo.MessageType = messageType;
                oInfo.PatientID = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
                oInfo.logs = logs;
                oDataSet.info = oInfo;
                oDataSet.parameterList = oParameterList;
                return oDataSet;
            }
             case &apos;rowSet&apos;:
            {
            	
            }

    }



}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>b7eaaa47-d0c7-402c-8c0a-69d71ab00f01</id>
            <name>Formatter</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658679</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Return formatted data for the Stored Procedures to be called

	@param {String} inbound - Input Value to be supplied from outside.
	@param {String} task    - DOB,Parameters list
	@return {Object}        - formatted data
*/
function formatter(inbound, task) {
    task = task.toUpperCase();
    
    switch (task) {
        case &quot;DOB&quot;:
        	  if (inbound.length==8)
            return inbound.substring(4, 6) + &quot;/&quot; + inbound.substring(6, 8) + &quot;/&quot; + inbound.substring(0, 4);
            else  return &apos;&apos;;
        case &quot;PARAMETERLIST&quot;:
            index = 0;
            for (index in inbound) {
                inbound[index] = &quot;&apos;&quot; + validate(inbound[index], &apos;&apos;).trim().replace(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;;
                index++
            }
            return inbound;
        case &quot;ESCAPESEQUENCE&quot;:
        	return inbound.toString().replace(/&quot;/gi,&quot;&quot;).replace(/&apos;/gi,&quot;&apos;&apos;&quot;).replace(/\n/gi, &quot; &quot;).replace(/&amp;amp;amp;/gi,&quot;&amp;amp;&quot;).replace(/\\T\\/g, &apos;&amp;&apos;).replace(/\\F\\/g, &apos;|&apos;).replace(/\\S\\/g, &apos;^&apos;).replace(/\\R\\/g, &apos;~&apos;).replace(/\\E\\/g, &apos;\\&apos;).replace(/\\N\\/g, &apos;*_&apos;).replace(/\\H\\/g, &apos;_*&apos;) ;//.replace(/&amp;/gi,&quot;&amp;amp;&quot;).replace(/\\T\\/g, &apos;&amp;&apos;)
        case &quot;FORMATHL7STRING&quot;:
        	return (inbound + &quot;&quot;).replace(/\\/g, &apos;\\E\\&apos;).replace(/\|/g, &apos;\\F\\&apos;).replace(/\^/g, &apos;\\S\\&apos;).replace(/~/g, &apos;\\R\\&apos;).replace(/&amp;/g, &apos;\\T\\&apos;).replace(/\n/g, &apos;\\.br\\&apos;);
        case &quot;REPLACER&quot;:
        	return &quot;[&quot;+inbound.toString().replace(/,/gi,&quot;][&quot;).replace(/&amp;#x0D;\n/g, &quot;][&quot;)+&quot;]&quot;;
        
        
        

    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>825a0321-d5f3-4da7-acbe-4929933f6ff3</id>
            <name>GenerateDTMFile</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658737</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
    /**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
    */
    function GenerateDTMFile(xInput) {
    // TODO: Enter code here
    xDocumentManagement = new XML(&apos;&lt;DocumentManagement type=&quot;metadata&quot;/&gt;&apos;);
    xImportInfo = new XML(&apos;&lt;ImportInfo /&gt;&apos;);
    xDestination = new XML(&apos;&lt;Destination /&gt;&apos;);
    xAssociation = new XML(&apos;&lt;Association /&gt;&apos;);
    xPatient = new XML(&apos;&lt;Patient /&gt;&apos;);
    xPhysician = new XML(&apos;&lt;Physician /&gt;&apos;);
    xDocument = new XML(&apos;&lt;Document /&gt;&apos;);


    xPatient.ID 		= xInput[&apos;patientData&apos;][&apos;patientID&apos;]; //Patient LastName
    xPatient.LastName 	= xInput[&apos;patientData&apos;][&apos;name&apos;][&apos;lastName&apos;]; //Patient First Name
    xPatient.FirstName 	= xInput[&apos;patientData&apos;][&apos;name&apos;][&apos;firstName&apos;]; //Patient SSn
    var dob			= msg[&apos;patientData&apos;][&apos;dob&apos;].toString();
    xPatient.DOB 		= dob.substring(4, 6) + dob.substring(6, 8) + dob.substring(0, 4); //Patient DateOfBirth
    xPatient.Sex 		= msg[&apos;patientData&apos;][&apos;gender&apos;]; //Patinet ID
    xPatient.MRN		= &quot;&quot;;
    xPatient.SSN		= &quot;&quot;;

    xPhysician.ID		= xInput[&apos;provider&apos;][&apos;providerId&apos;];
    xPhysician.LastName	= xInput[&apos;provider&apos;][&apos;providerName&apos;][&apos;lastName&apos;];
    xPhysician.FirstName	= xInput[&apos;provider&apos;][&apos;providerName&apos;][&apos;firstName&apos;];


    var messageDateTime=msg[&apos;patientData&apos;][&apos;messageDTTM&apos;].toString();

    xDocument.ImportAsSigned	= &quot;True&quot;;
    xDocument.ClinicalDate	= messageDateTime.substring(4, 6) + messageDateTime.substring(6, 8) + messageDateTime.substring(0, 4);
    xDocument.ClinicalTime	= messageDateTime.substring(8, 10) + &quot;:&quot; + messageDateTime.substring(10, 12);
    xDocument.Summary		= xInput[&apos;documentData&apos;][&apos;displayName&apos;];
    xDocument.DocumentType	= &quot;External Other&quot;;
    xDocument.DocumentPath	= xInput[&apos;documentData&apos;][&apos;fileName&apos;];
    xDocument.DocumentPath.@Directory = xInput[&apos;documentData&apos;][&apos;destinationFilePath&apos;];

    xImportInfo.Destination 	= xDestination;
    xImportInfo.Association 	= xAssociation;
    xImportInfo.Patient 		= xPatient;
    xImportInfo.Physician 	= xPhysician;
    xImportInfo.Document 	= xDocument;

    xDocumentManagement.ImportInfo = xImportInfo;

    //oDocumentXmlSet.DocumentManagement = xDocumentManagement;
    return &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;+xDocumentManagement;
    }
  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>a46b3b14-58b5-4516-b126-d2a9595a4fe8</id>
            <name>GenerateHL7MessageForClinicalSync</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658597</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function returnHL7Message(xInput) {
	var xMessage = &lt;HL7Message /&gt;;
	
	createSegment(&apos;MSH&apos;, xMessage);
		xMessage.MSH[&apos;MSH.1&apos;]			=	&apos;|&apos;;
		xMessage.MSH[&apos;MSH.2&apos;]			=	&apos;^~\&amp;&apos;;
		xMessage.MSH[&apos;MSH.3&apos;]			=	&apos;&apos;;
		xMessage.MSH[&apos;MSH.4&apos;]			=	&apos;&apos;;
		xMessage.MSH[&apos;MSH.5&apos;]			=	&apos;&apos;;
		xMessage.MSH[&apos;MSH.6&apos;]			=	&apos;&apos;;
		xMessage.MSH[&apos;MSH.7&apos;]			=	&apos;&apos;;//date
		xMessage.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]	=	&apos;Sync&apos;;//event type
		xMessage.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]	=	&apos;Sync&apos;;//event code
		xMessage.MSH[&apos;MSH.10&apos;]			=	&apos;&apos;;//Message Control Id
		xMessage.MSH[&apos;MSH.11&apos;]			=	&apos;P&apos;;//Processing id
		xMessage.MSH[&apos;MSH.12&apos;]			=	&apos;2.3&apos;;//Version ID
		xMessage.MSH[&apos;MSH.15&apos;][&apos;MSH.15.1&apos;] =	&apos;AL&apos;;
		xMessage.MSH[&apos;MSH.16&apos;][&apos;MSH.16.1&apos;] =	&apos;AL&apos;;

	createSegment(&apos;SCH&apos;, xMessage);
		    xMessage.SCH[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;] 	= xInput.getString(&apos;appointmentNo&apos;);
		   

		return xMessage; 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>8afb777c-d916-4c28-9b7e-a1bbad144b60</id>
            <name>GetChannelName</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658525</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get cahnnel name from the folder details

	@param {Any} xInput - Folder name
	@param {Any} inputChannelName -  channel name which this fuction calls
	@return {String} return description - channel name which will read data by the channel 
	Author		: HL7 Team
     Change History	:
     Date					Name					    Description
*/
function returnChannelName(xInput, inputChannelName) {
    channelName = &quot;&quot; + inputChannelName + &quot;&quot;;
    cName = channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2];
    input = &quot;&quot; + xInput;
    switch (input.toUpperCase()) {
        case &apos;MASTER&apos;:
            return &apos;1_&apos; + cName + &apos;_Master&apos;;
        case &apos;IN&apos;:
            return &apos;2_&apos; + cName + &apos;_ADT&apos;;
        case &apos;ADT_IN&apos;:
            return &apos;3_&apos; + cName + &apos;_AL&apos;;
        case &apos;AL_IN&apos;:
            return &apos;4_&apos; + cName + &apos;_Rx&apos;;
        case &apos;RX_IN&apos;:
            return &apos;5_&apos; + cName + &apos;_PMH&apos;;
        case &apos;PMH_IN&apos;:
            return &apos;6_&apos; + cName + &apos;_PSH&apos;;
        case &apos;PSH_IN&apos;:
            return &apos;7_&apos; + cName + &apos;_SocHx&apos;;
        case &apos;SOCHX_IN&apos;:
            return &apos;8_&apos; + cName + &apos;_FamHx&apos;;
        case &apos;FAMHX_IN&apos;:
            return &apos;9_&apos; + cName + &apos;_ImmunHx&apos;;
        case &apos;IMMUNHX_IN&apos;:
            return &apos;10_&apos; + cName + &apos;_SIU&apos;;
        default:
            channelName;
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>dc84ca9a-79b7-44d3-ae48-30f1706036c1</id>
            <name>GetOutboundConfigurationMapValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658608</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
    */
    function returnOutboundConfigurations(inputChannelName) {
    channelName = &quot;&quot; + inputChannelName + &quot;&quot;;
    var geItemPrefix = channelName.split(&quot;_&quot;)[1] + &quot;_GE_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_&quot;;
    oConfigurations = new Object();
    oConfigurations.ClinicalUpdateUserID =	configurationMap.get(geItemPrefix + &apos;OutboundUserIDClinicalUpdate&apos;);
    oConfigurations.DocumentUpdateUserID = 	configurationMap.get(geItemPrefix + &apos;OutboundUserIDDocumentUpdate&apos;);
    oConfigurations.ADTSendingFacility   = 	configurationMap.get(geItemPrefix + &apos;OutboundSendingFacilityADT&apos;);
    oConfigurations.MDMSendingFacility   = 	configurationMap.get(geItemPrefix + &apos;OutboundSendingFacilityMDM&apos;);
    oConfigurations.ORUSendingFacility   = 	configurationMap.get(geItemPrefix + &apos;OutboundSendingFacilityORU&apos;);
    oConfigurations.SIUSendingFacility   = 	configurationMap.get(geItemPrefix + &apos;OutboundSendingFacilitySIU&apos;);
    oConfigurations.ReceivingFacility    = 	configurationMap.get(geItemPrefix + &apos;OutboundReceivingFacility&apos;);
    oConfigurations.TCPSenderIp    	 = 	configurationMap.get(geItemPrefix + &apos;OutboundTCPSenderPort&apos;);
    oConfigurations.TCPSenderAddress     = 	configurationMap.get(geItemPrefix + &apos;OutboundTCPSenderAddress&apos;);
    
    var caItemPrefix = channelName.split(&quot;_&quot;)[1] + &quot;_CA_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_&quot;;
    oConfigurations.NodeJSAddress = configurationMap.get(caItemPrefix + &apos;NodeJSAddress&apos;);
    oConfigurations.NodeJSPort =configurationMap.get(caItemPrefix + &apos;NodeJSPort&apos;);
    oConfigurations.DtmFilePath= configurationMap.get(caItemPrefix + &apos;DtmFilePath&apos;);
    oConfigurations.OruFilePath= configurationMap.get(caItemPrefix + &apos;ORUFilePath&apos;);
    oConfigurations.IsORUtoLinkLogic= configurationMap.get(caItemPrefix + &apos;IsORUtoLinkLogic&apos;);
    oConfigurations.IsAuthorizationsRequired= configurationMap.get(caItemPrefix + &apos;IsAuthorizationsRequired&apos;);
    oConfigurations.IsBenefitAssignmentDateRequired= configurationMap.get(caItemPrefix + &apos;IsBenefitAssignmentDateRequired&apos;);
    oConfigurations.IsPrivacyPolicyDateRequired= configurationMap.get(caItemPrefix + &apos;IsPrivacyPolicyDateRequired&apos;);
    oConfigurations.IsReleasePtInfoDateRequired= configurationMap.get(caItemPrefix + &apos;IsReleasePtInfoDateRequired&apos;);
    oConfigurations.IsSignatureOnFile= configurationMap.get(caItemPrefix + &apos;IsSignatureOnFile&apos;);
    oConfigurations.SourceDescription= configurationMap.get(caItemPrefix + &apos;SourceDescription&apos;);
    oConfigurations.ReleasePtInfoDescription= configurationMap.get(caItemPrefix + &apos;ReleasePtInfoDescription&apos;);
    oConfigurations.PrivacyPolicyDescription= configurationMap.get(caItemPrefix + &apos;PrivacyPolicyDescription&apos;);
    oConfigurations.BenefitAssignmentDescription= configurationMap.get(caItemPrefix + &apos;BenefitAssignmentDescription&apos;);
    oConfigurations.NumberOfDaysToPullOnDemandAppointments= configurationMap.get(caItemPrefix + &apos;NumberOfDaysToPullOnDemandAppointments&apos;);
    oConfigurations.IsAutoApplyRequired= configurationMap.get(caItemPrefix + &apos;IsAutoApplyRequired&apos;);
    oConfigurations.PMHItemName= configurationMap.get(caItemPrefix + &apos;PMHItemName&apos;);
    oConfigurations.IsPMHToProblems= configurationMap.get(caItemPrefix + &apos;IsPMHToProblems&apos;);
    oConfigurations.AddtionalParametersToEHR= configurationMap.get(caItemPrefix + &apos;AddtionalParametersToPMS&apos;);
    oConfigurations.GetGarauantorBalance= configurationMap.get(caItemPrefix + &apos;GetGarauantorBalance&apos;);
    oConfigurations.PaymentLocation= configurationMap.get(caItemPrefix + &apos;PaymentLocation&apos;);
    

    return oConfigurations;
    }

    function returnOutboundListenerPort(inputChannelName) {
    channelName = &quot;&quot; + inputChannelName + &quot;&quot;;
    return configurationMap.get(channelName.split(&quot;_&quot;)[1] + &quot;_CA_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_OutboundListenerPort&quot;);
    }
  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>f26e03b0-dda1-40cd-8cf7-9a4cdc603936</id>
            <name>HL7 Validation</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658620</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function validateHL7Message(msg) {
bValidation=true;
sLogs=&apos;&apos;;
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()==&apos;&apos;) {
	bValidation=false;
	sLogs+=&quot;Patient ID not found.\n&quot;;
}

if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString()==&apos;&apos;) {
	bValidation=false;
	sLogs+=&quot;Patient Alternate ID not found.\n&quot;;
}

return {
	bValidation : bValidation,
	sLogs : sLogs 
	};
	

}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>71306b47-0f78-4c78-8657-4d53cc9ea457</id>
            <name>HL7MessageDirectory</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658665</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} inputChannelName - 
	@return {String} return description
*/
function returnHL7MessageDirectory(inputChannelName) {
    channelName = &quot;&quot;+inputChannelName+&quot;&quot;;
    hl7MessageDirectory = configurationMap.get(channelName.split(&quot;_&quot;)[1] + &quot;_CA_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_DirectoryForHL7Message&quot;);
    if (hl7MessageDirectory != null &amp;&amp; hl7MessageDirectory.length() &gt; 0 &amp;&amp; hl7MessageDirectory.charAt(hl7MessageDirectory.length() - 1) == &apos;\\&apos;) {
       hl7MessageDirectory = hl7MessageDirectory;
    } else {
        hl7MessageDirectory=hl7MessageDirectory + &quot;\\&quot;;
       
    }
    
    return hl7MessageDirectory;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>368a53e3-cc0a-43f3-a5da-52ed1ea8f4b3</id>
            <name>IPandPort</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658795</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} inputChannelName - 
	@return {String} return description
*/
function returnListenerPort(inputChannelName) {
    channelName = &quot;&quot; + inputChannelName + &quot;&quot;;
    return configurationMap.get(channelName.split(&quot;_&quot;)[1] + &quot;_CA_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_InboundListenerPort&quot;);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>22be88a9-5eab-4ac4-9719-a9561b5e018a</id>
            <name>ODBCScriptDirectory</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658568</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function returnODBCScriptDirectory(inputChannelName) {
    channelName = &quot;&quot; + inputChannelName + &quot;&quot;;
    odbcScriptDirectory = configurationMap.get(channelName.split(&quot;_&quot;)[1] + &quot;_CA_V_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_DirectoryForODBCScript&quot;);
    if (odbcScriptDirectory != null &amp;&amp; odbcScriptDirectory.length() &gt; 0 &amp;&amp; odbcScriptDirectory.charAt(odbcScriptDirectory.length() - 1) == &apos;\\&apos;) {
        odbcScriptDirectory = odbcScriptDirectory;
    } else {
        odbcScriptDirectory = odbcScriptDirectory + &quot;\\&quot;;

    }

    return odbcScriptDirectory;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>944c9fde-5d3d-472f-8532-3bac188afc5c</id>
            <name>PatientDataSet</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658717</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
    /**
    Returns Query Parameters for the Stored Procedures to be called. Works on both DB extracted result set,
    inbound recieved HL7 ADT and SIU messages.

    @param {XML} xInput - XML of result set. msg for HL7 messages.
    @param {String} sMode - DB or HL7 only.
    @param {Object} oConfig -
    @return {Object}
    Author		: HL7 Team
    Date			: Jan/02/2018
    Change History	:
    Date					Name					    Description
    Jun/04/2018		Giri		          		TFS#21319 : Multiple Race not going in Outbound and Carrier ID displaing &quot;0&quot;,if patient has no insurance
    06/07/2018			Pranav					TFS #21396 : GE-CPS Appointment notes update
    06/11/2018			Pranav					TFS #21329 : GE-CPS Appointment notes update
    Jul/02/2018     	Giridhar					TFS#22016 : Octopus - Separate fields for   PCP  First name , Referring First name  and Employer Name
    07/03/2018    		Pranav            			TFS #22024 : 6.3 HF --When clinic completes the checkin in pms , ca is updating the appointment and not displaying as completed via pms
    07/19/2018    		Giri						TFS#22455 : Immunization Inbound-GE CPS : ColumnMapping and Interfacemapper scripts to get the Vaccine group data from GE through SIU (ODBC)
    */
    function returnPatientTD(xInput, sMode, oConfig) {
    //default xml namespace = &apos;&apos;;
    oDataSet = new Object();
    oParameterList = new Object();
    oDemographics = new Object();
    xTargetClincalDataset = new XML(&apos;&lt;TargetClinicalDataSet /&gt;&apos;);

    switch (sMode) {
    case &apos;DB&apos;:
    {
    messageType = xInput.getString(&apos;msh_messagetype&apos;);
    aPIDList = new Array(); //Array list for demographics
    if(xInput.getString(&apos;pid_race1&apos;) == xInput.getString(&apos;pid_race2&apos;))
    race= xInput.getString(&apos;pid_race1&apos;)
    else
    race= xInput.getString(&apos;pid_race1&apos;) + &apos;$!&apos; + xInput.getString(&apos;pid_race2&apos;)

    if (xInput.getString(&apos;pid_patientid&apos;) != &apos;&apos;) aPIDList.push(xInput.getString(&apos;pid_patientid&apos;)); //PatientID
    else throw &apos;patient ID not found. Aborting.&apos;;
    if (xInput.getString(&apos;pid_otherid&apos;) != &apos;&apos;) aPIDList.push(xInput.getString(&apos;pid_otherid&apos;));//Patient OtherID
    else throw &apos;patient Other ID not found. Aborting.&apos;;
    //aInfo=new Array();
    //aInfo.push(&quot;Patient Information recieved&quot;);

    aPIDList.push(xInput.getString(&apos;pid_firstname&apos;));//Patient First Name
    aPIDList.push(xInput.getString(&apos;pid_mname&apos;));//Patient Midle Name
    aPIDList.push(xInput.getString(&apos;pid_lastname&apos;));//Patient Last Name
    aPIDList.push(xInput.getString(&apos;pid_suffix&apos;));//Pateint suffix
    aPIDList.push(xInput.getString(&apos;pid_defaddress1&apos;));//Patient address 1
    aPIDList.push(xInput.getString(&apos;pid_defaddress2&apos;));//Patient address 2
    aPIDList.push(xInput.getString(&apos;pid_defcity&apos;));//Patient City
    aPIDList.push(xInput.getString(&apos;pid_defstate&apos;));//Patient State
    aPIDList.push(xInput.getString(&apos;pid_defzip&apos;));//Patient ZIP
    aPIDList.push(xInput.getString(&apos;pid_defcountry&apos;));//Patient Country
    aPIDList.push(xInput.getString(&apos;pid_ssnnumber&apos;));//Patient SSN
    aPIDList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;pid_sex&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));//Patient Gender
    aPIDList.push(formatter(&apos;&apos;+xInput.getString(&apos;pid_date_timeofbirth&apos;)+&apos;&apos;, &apos;DOB&apos;));//Patient DOB
    aPIDList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;pid_maritalstatus&apos;)+&apos;&apos;, &apos;MARITALSTATUS&apos;,&apos;inboundMaps&apos;));//Patient Marital status
    aPIDList.push(xInput.getString(&apos;pid_homephonenumber&apos;));//Patient Home phone
    aPIDList.push(xInput.getString(&apos;pid_businessphonenumber&apos;));//Patient business phone
    aPIDList.push(xInput.getString(&apos;pid_businessphoneextn&apos;));//patient business phone extension
    aPIDList.push(xInput.getString(&apos;pid_personalemail&apos;));//Patient email id
    aPIDList.push(xInput.getString(&apos;pidpatientdeathindicator&apos;));//Patient death indicator
    aPIDList.push(xInput.getString(&apos;pidprimarylanguage&apos;));//Patient Language
    aPIDList.push(xInput.getString(&apos;pidpatientaccountnumber&apos;));//Patient Account Number
    aPIDList.push(xInput.getString(&apos;piddefcountrycounty&apos;));//Patient def county
    aPIDList.push(xInput.getString(&apos;pidhomephonecode&apos;));//patient home phone code
    aPIDList.push(xInput.getString(&apos;pidbusinessphonecode&apos;));//patient business phone code
    aPIDList.push(race);//Patient race
    aPIDList.push(xInput.getString(&apos;pid_ethnicgroup&apos;));//Patient ethnic group
    aPIDList.push(xInput.getString(&apos;pid_picture&apos;));//Patient picture
    aPIDList.push(xInput.getString(&apos;pid_contactby&apos;));//patient prefered contact
    
    aPIDList.push(xInput.getString(&apos;pid_mobilenumber&apos;));//patient Mobile number
   

    //oParameterList.Demographics = aPIDList;

    xTargetClincalDataset.Demographics = formatter( aPIDList,&apos;parameterlist&apos;);
    oDataSet.Demographics = xTargetClincalDataset;
    oDataSet.info = &quot;Patient Demographics Info processed. \n&quot;;
    if(messageType.indexOf(&quot;ADT&quot;)!=-1)
    {
    aPIDExtendedList=new Array();//Array list for extended demographics
    aPIDExtendedList.push(xInput.getString(&apos;pid_patientid&apos;)); //PatientID
    aPIDExtendedList.push(xInput.getString(&apos;pid_otherid&apos;)); //Patient OtherID
    aPIDExtendedList.push(&apos;A08&apos;); //Event code
    aPIDExtendedList.push(xInput.getString(&apos;msh_date_timeofmessage&apos;));//Message generated datetime
    aPIDExtendedList.push(&apos;&apos;);//Merge ID
    aPIDExtendedList.push(&apos;&apos;);//Patient addition demographic id
    aPIDExtendedList.push(&apos;&apos;);//Family name
    aPIDExtendedList.push(&apos;&apos;);//Given Name
    aPIDExtendedList.push(&apos;&apos;);//Second name
    aPIDExtendedList.push(&apos;&apos;);//Suffix
    aPIDExtendedList.push(&apos;&apos;);//prefix
    aPIDExtendedList.push(&apos;&apos;);//NK1 Set id
    aPIDExtendedList.push(&apos;&apos;);//NK1 Family Name
    aPIDExtendedList.push(&apos;&apos;);//Given name
    aPIDExtendedList.push(&apos;&apos;);//Second name
    aPIDExtendedList.push(&apos;&apos;);//Suffix
    aPIDExtendedList.push(&apos;&apos;);//Prefix
    aPIDExtendedList.push(&apos;&apos;);//Namespace ID
    aPIDExtendedList.push(&apos;&apos;);//PV1 Code code value
    aPIDExtendedList.push(&apos;&apos;);//PV1 ID
    aPIDExtendedList.push(&apos;&apos;);//Family name
    aPIDExtendedList.push(&apos;&apos;);//Given name
    aPIDExtendedList.push(&apos;&apos;);//Second name
    aPIDExtendedList.push(&apos;&apos;);//Suffix
    aPIDExtendedList.push(&apos;&apos;);//Prefix
    aPIDExtendedList.push(&apos;&apos;);//OBX Remark
    aPIDExtendedList.push(&apos;&apos;);//OBX Accoun number
    aPIDExtendedList.push(&apos;&apos;);//OBX State
    aPIDExtendedList.push(&apos;&apos;);//Patient Height
    aPIDExtendedList.push(&apos;&apos;);//Weight
    aPIDExtendedList.push(&apos;&apos;);//DiabetesMellitus
    aPIDExtendedList.push(&apos;&apos;);//Smoker
    aPIDExtendedList.push(&apos;&apos;);//Allergy Value
    aPIDExtendedList.push(&apos;&apos;);//Height units
    aPIDExtendedList.push(&apos;&apos;);//Weight Units
    aPIDExtendedList.push(&apos;&apos;);//Primary Insurance policy number
    aPIDExtendedList.push(&apos;&apos;);//Company ID
    aPIDExtendedList.push(&apos;&apos;);//Company Name
    aPIDExtendedList.push(xInput.getString(&apos;in1_effdateprimary&apos;));//Primary insurance start date
    aPIDExtendedList.push(xInput.getString(&apos;in1_expdateprimary&apos;));//primary insurance expairy date
    aPIDExtendedList.push(&apos;&apos;);//Scondary insurance policy number
    aPIDExtendedList.push(&apos;&apos;);//Company id
    aPIDExtendedList.push(&apos;&apos;);//company name
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1effdatesecondary&apos;));//secondary insurance start date
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1expdatesecondary&apos;));//secondary insurance end date
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1insurancename&apos;));//Primary insurance name
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1phonenumber&apos;));//Phone number
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscribermiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscriberlastname&apos;));//policy holder name (Firstname Middlename Lastname)
    aPIDExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;adt_in1policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;));//dob
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1policynumber&apos;));//policy number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1groupnumber&apos;));//group number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1relationship&apos;));//relationship
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2insurancename&apos;));//Secondary insurance name
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2phonenumber&apos;));//phone number
    aPIDExtendedList.push(xInput.getString(&apos;ins_in2subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_in2subscriberlastname&apos;));//policy holder name
    aPIDExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;adt_in2policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;));//dob
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2policynumber&apos;));//policy number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2groupnumber&apos;));//group number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2relationship&apos;));//relationship
    aPIDExtendedList.push(xInput.getString(&apos;adt_in3insurancename&apos;));//Tertiary Insurance name
    aPIDExtendedList.push(xInput.getString(&apos;adt_in3phonenumber&apos;));//phone number
    aPIDExtendedList.push(xInput.getString(&apos;ins_in3subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_in3subscriberlastname&apos;));//policy holder name
    aPIDExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;adt_in3policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;));//dob
    aPIDExtendedList.push(xInput.getString(&apos;adt_in3policynumber&apos;));//policy number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in3groupnumber&apos;));//group number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in3relationship&apos;));//relationship
    aPIDExtendedList.push(xInput.getString(&apos;ins_coverageorder&apos;));//insurance coverage order
    aPIDExtendedList.push(xInput.getString(&apos;ins_ispolicyincoveragelist&apos;));//coverage list
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1policynumber&apos;));//policy number
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1groupnumber&apos;));//group number
    if(xInput.getString(&apos;ins_carrierid&apos;)==&quot;0&quot;)
    {
    aPIDExtendedList.push(&apos;&apos;);//planid
    aPIDExtendedList.push(&apos;&apos;);//plan code
    aPIDExtendedList.push(&apos;&apos;);//plan name
    aPIDExtendedList.push(&apos;&apos;);//carrier id
    aPIDExtendedList.push(&apos;&apos;);//carrier code
    aPIDExtendedList.push(&apos;&apos;);//carrier name
    }
    else
    {
    aPIDExtendedList.push(xInput.getString(&apos;ins_planid&apos;));//planid
    aPIDExtendedList.push(xInput.getString(&apos;ins_plancode&apos;));//plan code
    aPIDExtendedList.push(xInput.getString(&apos;ins_planname&apos;));//plan name
    aPIDExtendedList.push(xInput.getString(&apos;ins_carrierid&apos;));//carrier id
    aPIDExtendedList.push(xInput.getString(&apos;ins_carrierid&apos;));//carrier code
    aPIDExtendedList.push(xInput.getString(&apos;ins_carrierid&apos;)+&apos;-&apos;+xInput.getString(&apos;ins_carriername&apos;));//carrier name
    }
    aPIDExtendedList.push(xInput.getString(&apos;adt_in1policynumber&apos;));//policy number
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscribermiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscriberlastname&apos;));//policy holder name
    aPIDExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;adt_in1policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;));//dob
    aPIDExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;ins_subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));//policy holder gender code
    aPIDExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;ins_subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));//policy holder gender description
    aPIDExtendedList.push(xInput.getString(&apos;ins_patientrelationtosubscribercode&apos;));//relationship code
    aPIDExtendedList.push(xInput.getString(&apos;siu_in1relationship&apos;));//relationship description
    aPIDExtendedList.push(&apos;&apos;);//Provider speciality
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;));//subscriber firstname
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscriberlastname&apos;));//subscriber lastname
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscribermiddlename&apos;));//subscriber middle name
    aPIDExtendedList.push(xInput.getString(&apos;ins_subscribertitle&apos;));//subsriber title
    aPIDExtendedList.push(xInput.getString(&apos;ins_payerlookupid&apos;));//payer lookup id
    aPIDExtendedList.push(xInput.getString(&apos;adt_in2policynumber&apos;));//Tertiary insurance number
    aPIDExtendedList.push(xInput.getString(&apos;ins_in1compidtertiary&apos;));//Company id
    aPIDExtendedList.push(xInput.getString(&apos;ins_in2subscriberfirstname&apos;));//secondary insurance subscriber firstname
    aPIDExtendedList.push(xInput.getString(&apos;ins_in2subscriberlastname&apos;));//last name
    aPIDExtendedList.push(xInput.getString(&apos;ins_in2subscribergendercode&apos;));//gender code
    aPIDExtendedList.push(xInput.getString(&apos;ins_in3subscriberfirstname&apos;));//Tertiary insurance subscriber firstname
    aPIDExtendedList.push(xInput.getString(&apos;ins_in3subscriberlastname&apos;));//last name
    aPIDExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;ins_in3subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));//gendercode
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcplastname&apos;));//PrimaryCareProvider lastname
    //aPIDExtendedList.push(xInput.getString(&apos;adt_pcpfirstname&apos;));//PCP firstname
    if(xInput.getString(&apos;adt_pcpfirstname&apos;) !=&apos;&apos;)
    {
    aPIDExtendedList.push( xInput.getString(&apos;adt_pcpfirstname&apos;) +&apos; &apos;+xInput.getString(&apos;adt_pcpmiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;adt_pcplastname&apos;)+&apos;$!&apos;+xInput.getString(&apos;pcpotherid&apos;));
    }
    else
    {
    aPIDExtendedList.push(&apos;&apos;);
    }
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpmiddlename&apos;));//PCP middle name
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpsuffix&apos;));//PCP suffix
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpaddress1&apos;));//PCP address1
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpcity&apos;));//PCP City
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpstate&apos;));//PCP State
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpzip&apos;));//PCP ZIP
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpcountry&apos;));// PCP Country
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcphomephone&apos;));//PCP home phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcpbusinessphone&apos;));//PCP business phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_pcprelationship&apos;));//PCP Relationship
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfplastname&apos;));//Referring Provider Last name
    //aPIDExtendedList.push(xInput.getString(&apos;adt_rfpfirstname&apos;));//RFP first name
    if(xInput.getString(&apos;adt_rfpfirstname&apos;)!=&apos;&apos;)
    {
    aPIDExtendedList.push( xInput.getString(&apos;adt_rfpfirstname&apos;) +&apos; &apos;+xInput.getString(&apos;adt_rfpmiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;adt_rfplastname&apos;)+&apos;$!&apos;+xInput.getString(&apos;rfpotherid&apos;));
    }
    else
    {
    aPIDExtendedList.push(&apos;&apos;);
    }
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpmiddlename&apos;));//RFP middle name
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpsuffix&apos;));//RFP suffix
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpaddress1&apos;));//RFP Address1
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpcity&apos;));//RFP City
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpstate&apos;));//RFP State
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpzip&apos;));//RFP ZIP
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpcountry&apos;));//RFP Country
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfphomephone&apos;));//RFP Home phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfpbusinessphone&apos;));//RFP Business phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_rfprelationship&apos;));//RFP relationship
    aPIDExtendedList.push(xInput.getString(&apos;adt_peclastname&apos;));//Emergenct contact lastname
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecfirstname&apos;));//first name
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecmiddlename&apos;));//middle name
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecsuffix&apos;));//suffix
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecaddress1&apos;));//address 1
    aPIDExtendedList.push(xInput.getString(&apos;adt_peccity&apos;));//city
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecstate&apos;));//state
    aPIDExtendedList.push(xInput.getString(&apos;adt_peczip&apos;));//ZIP
    aPIDExtendedList.push(xInput.getString(&apos;adt_peccountry&apos;));//country
    aPIDExtendedList.push(xInput.getString(&apos;adt_pechomephone&apos;));//home phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecbusinessphone&apos;));//business phone
    aPIDExtendedList.push(xInput.getString(&apos;adt_pecrelationship&apos;));//relationship
    aPIDExtendedList.push(xInput.getString(&apos;adt_employerid&apos;));//Employer id
    aPIDExtendedList.push(xInput.getString(&apos;adt_employername&apos;));//Employer name
    aPIDExtendedList.push(xInput.getString(&apos;adt_empoccupation&apos;));//Occupation
    aPIDExtendedList.push(xInput.getString(&apos;adt_empstatusdate&apos;));//Employment status date
    aPIDExtendedList.push(xInput.getString(&apos;adt_employmentstatus&apos;));//Employment status
    aPIDExtendedList.push(xInput.getString(&apos;adt_employerdetails&apos;));//Employment details
    aPIDExtendedList.push(xInput.getString(&apos;adt_preferredpharmacy&apos;));//Pharmacy details
    if(xInput.getString(&apos;adt_pcpfirstname&apos;) !=&apos;&apos;)
    {
    aPIDExtendedList.push( xInput.getString(&apos;adt_pcpfirstname&apos;) +&apos; &apos;+xInput.getString(&apos;adt_pcpmiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;adt_pcplastname&apos;)); //PCP Full Name
    }
    else
    {
    aPIDExtendedList.push(&apos;&apos;);//PCP Full Name
    }
    if(xInput.getString(&apos;adt_rfpfirstname&apos;)!=&apos;&apos;)
    {
    aPIDExtendedList.push( xInput.getString(&apos;adt_rfpfirstname&apos;) +&apos; &apos;+xInput.getString(&apos;adt_rfpmiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;adt_rfplastname&apos;));  //Rf Provider Full Name
    }
    else
    {
    aPIDExtendedList.push(&apos;&apos;); //Rf Provider Full Name
    }

    //oParameterList.ExtendedDemographics = aPIDExtendedList;
    oDataSet.info += &quot;Patient extended demographic Info processed.&quot;;
    xTargetClincalDataset.ExtendedDemographics = formatter(aPIDExtendedList,&apos;PARAMETERLIST&apos;);
    oDataSet.ExtendedDemographics = xTargetClincalDataset;

    }
    if (messageType.indexOf(&quot;SIU&quot;)!=-1)
    {
    aSIUList = new Array();
    aSIUExtendedList=new Array();
    aSIUAssessementList=new Array();

    aSIUList.push(xInput.getString(&apos;pid_patientid&apos;)); //PatientID
    aSIUList.push(xInput.getString(&apos;pid_otherid&apos;)); //Patient OtherID
    if (xInput.getString(&apos;schplacerappointmentid&apos;) != &apos;&apos;) aSIUList.push(xInput.getString(&apos;schplacerappointmentid&apos;)); //ApptID
    else throw &apos;Appointment ID not found. Aborting.&apos;;
    aSIUList.push(xInput.getString(&apos;schfillerappointmentid&apos;)); //SCHFAEntityID
    aSIUList.push(xInput.getString(&apos;schfanamespaceid&apos;));//SCHFANamespaceID
    aSIUList.push(xInput.getString(&apos;schoccurrencenumber&apos;));//SCHOccurenceNo
    aSIUList.push(xInput.getString(&apos;scheventreason&apos;));//SCHEventReasonID
    aSIUList.push(xInput.getString(&apos;schappointmentreason&apos;));//SCHARID
    aSIUList.push(xInput.getString(&apos;schartext&apos;));//SCHARText
    aSIUList.push(xInput.getString(&apos;schatqstartdatetime&apos;));//SCHATQStartDatetime
    aSIUList.push(xInput.getString(&apos;schatqenddatetime&apos;));//SCHATQEndDatetime
    aSIUList.push(&apos;&apos;);//SCHATQPriority
    aSIUList.push(xInput.getString(&apos;schplacercontactperson&apos;));//SCHPCPID
    aSIUList.push(xInput.getString(&apos;schpcpfamilyname&apos;));//SCHPCPFamilyName
    aSIUList.push(xInput.getString(&apos;schpcpgivenname&apos;));//SCHPCPGivenName
    aSIUList.push(xInput.getString(&apos;schpcpsecondname&apos;));//SCHPCPSecondName
    aSIUList.push(xInput.getString(&apos;schpcpsuffix&apos;));//SCHPCPSuffix
    aSIUList.push(xInput.getString(&apos;schpcpprefix&apos;));//SCHPCPPrefix
    aSIUList.push(xInput.getString(&apos;schplacercontactlocation&apos;));//SCHPCLPointOfCare
    aSIUList.push(xInput.getString(&apos;schpcllocationdescription&apos;));//SCHPCLLocationDescription
    aSIUList.push(xInput.getString(&apos;schfillercontactperson&apos;));//SCHFCPID
    aSIUList.push(xInput.getString(&apos;siu_aillocationtypecode&apos;));//SCHFCLPointOfCare
    aSIUList.push(xInput.getString(&apos;siu_aillocationtypetext&apos;));//SCHFCLLocationDescription
    aSIUList.push(xInput.getString(&apos;schenteredbyperson&apos;));//SCHEnteredByPersonID
    aSIUList.push(xInput.getString(&apos;schfillerstatuscode&apos;));//SCHFillerStatusCodeID
    aSIUList.push(xInput.getString(&apos;scheventreasontext&apos;));//SCHEventReasonText
    aSIUList.push(xInput.getString(&apos;schappointmenttypecode&apos;));//SCHAppointmentTypeCode
    aSIUList.push(xInput.getString(&apos;schappointmenttypetext&apos;));//SCHAppointmentTypeText
    aSIUList.push(xInput.getString(&apos;schplacerappointmentid&apos;));//schplacerappointmentid
    aSIUList.push(xInput.getString(&apos;schpanamespaceid&apos;));//Name space ID
    aSIUList.push(xInput.getString(&apos;schappointmentduration&apos;));//Appointment duration
    aSIUList.push(xInput.getString(&apos;schappointmentdurationunits&apos;));//Appointment duration units
    aSIUList.push(xInput.getString(&apos;schfcpfamilyname&apos;));//schfcpfamilyname
    aSIUList.push(xInput.getString(&apos;schfcpgivenname&apos;));//SCHFCPGivenName
    aSIUList.push(xInput.getString(&apos;schfcpsecondname&apos;));//SCHFCPSecondName
    aSIUList.push(xInput.getString(&apos;schebpfamilyname&apos;));//SCHEBPFamilyName
    aSIUList.push(xInput.getString(&apos;schebpgivenname&apos;));//SCHEBPGivenName
    aSIUList.push(xInput.getString(&apos;schebpsecondname&apos;));//SCHEBPSecondName

    // oParameterList.Schedule = aSIUList;
    xTargetClincalDataset.Schedule = formatter(aSIUList,&apos;parameterlist&apos;);
    oDataSet.Schedule = xTargetClincalDataset;

    aSIUExtendedList.push(xInput.getString(&apos;pid_patientid&apos;)); //PatientID
    aSIUExtendedList.push(xInput.getString(&apos;pid_otherid&apos;)); //Patient OtherID
    aSIUExtendedList.push(xInput.getString(&apos;schplacerappointmentid&apos;)); //ApptID
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1patientclass&apos;)); //SIU_PV1PatientClass
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresdoctorid&apos;)); //SIU_PV1ADID
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipreslastname&apos;)); //Provider LastName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresfirstname&apos;)); //Provider FirstName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresmiddlename&apos;)); //Provider Middle name
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1suffix&apos;)); //Provider Suffix
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1prefix&apos;)); //Provider Prefix
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1mobility&apos;)); //AmbulatoryStatus
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1patienttype&apos;)); //PatientType
    aSIUExtendedList.push(&apos;&apos;); //Observation Value
    aSIUExtendedList.push(&apos;&apos;); //Observation Units
    aSIUExtendedList.push(xInput.getString(&apos;siu_examcode&apos;)); //Exam code
    aSIUExtendedList.push(xInput.getString(&apos;siu_examdesc&apos;)); //Exam Description
    aSIUExtendedList.push(&apos;Department&apos;); //PointofCare
    aSIUExtendedList.push(&apos;Department&apos;); //Description
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1assignedpatientlocation&apos;)); //Location
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1room&apos;)); //Room
    aSIUExtendedList.push(&apos;&apos;); //Bed
    aSIUExtendedList.push(xInput.getString(&apos;siu_encounterid&apos;)); //EncounterID
    aSIUExtendedList.push(&apos;&apos;); //Height
    aSIUExtendedList.push(&apos;&apos;); //Height Units
    aSIUExtendedList.push(&apos;&apos;); //Account Number1
    aSIUExtendedList.push(&apos;&apos;); //Account Number2
    aSIUExtendedList.push(&apos;&apos;); //Billing 1
    aSIUExtendedList.push(&apos;&apos;); //Billing 2
    aSIUExtendedList.push(&apos;&apos;); //Scanner Available 1
    aSIUExtendedList.push(&apos;&apos;); //Scanner avialable 2
    aSIUExtendedList.push(&apos;&apos;); //BUN/CR 1
    aSIUExtendedList.push(&apos;&apos;); //BUN/CR 2
    aSIUExtendedList.push(xInput.getString(&apos;siu_aiprefdoctorid&apos;)); //Referring DocID
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipreflastname&apos;)); //Referring Doctor LastName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipreffirstname&apos;)); //Referring Doctor FirstName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aiprefmiddlename&apos;)); //Referring Doctor MiddleName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresdoctorid&apos;)); //Resource Doctor ID
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipreslastname&apos;)); //Resource Doctor LastName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresfirstname&apos;)); //Resource Doctor FirstName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipresmiddlename&apos;)); //Resource Doctor MiddleName
    aSIUExtendedList.push(xInput.getString(&apos;siu_aillocationid&apos;)); //Location Type Code
    aSIUExtendedList.push(xInput.getString(&apos;siu_aillocationtypetext&apos;)); //Location Type Text
    aSIUExtendedList.push(xInput.getString(&apos;siu_aillocationid&apos;)); //Location Id
    aSIUExtendedList.push(&apos;&apos;); //Pregnant flag
    aSIUExtendedList.push(&apos;&apos;); //Valaue
    aSIUExtendedList.push(&apos;&apos;);//Primary Insurance policy number
    aSIUExtendedList.push(&apos;&apos;);//Company ID
    aSIUExtendedList.push(&apos;&apos;);//Company Name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1effdateprimary&apos;));//Primary insurance start date
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1expdateprimary&apos;));//primary insurance expairy date
    aSIUExtendedList.push(&apos;&apos;);//Scondary insurance policy number
    aSIUExtendedList.push(&apos;&apos;);//Company id
    aSIUExtendedList.push(&apos;&apos;);//company name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1effdatesecondary&apos;));//secondary insurance start date
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1expdatesecondary&apos;));//secondary insurance end date
    aSIUExtendedList.push(xInput.getString(&apos;adt_in1copay&apos;)); //Insurance Copay
    aSIUExtendedList.push(&apos;&apos;); //General Pay
    aSIUExtendedList.push(xInput.getString(&apos;siu_patientbalance&apos;)); //Patient Balance
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compidprimary&apos;)+&apos;-&apos;+xInput.getString(&apos;siu_in1compnameprimary&apos;)); //Primary insurance company name with ID
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1phonenumber&apos;)); //Phone number
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscribermiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscriberlastname&apos;)); // Patient name(firstname middilename lastname)
    aSIUExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;siu_in1policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;)); //Policy Holder DOB
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1policynumber&apos;)); // Primary policy Number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1groupnumber&apos;)); //Promary Policy Group number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1relationship&apos;)); //relationship
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compnamesecondary&apos;)); // Secondary Insurance company name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2phonenumber&apos;)); //Phone number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;siu_in2subscriberlastname&apos;)); //
    aSIUExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;siu_in2policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;)); //DOB
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1policynosecondary&apos;)); //secondary insurance policy number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2groupnumber&apos;)); //Secondary insurance group number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2relationship&apos;)); //Relationship
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3insurancename&apos;)); //Tertiary Insurance company name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3phonenumber&apos;)); //Phone number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;siu_in3subscriberlastname&apos;)); //Policy holder name
    aSIUExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;siu_in3policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;)); //DOB
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3policynumber&apos;)); //Policy number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3groupnumber&apos;)); //group number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3relationship&apos;)); //Relationship
    aSIUExtendedList.push(&apos;&apos;); //Payment Collected
    aSIUExtendedList.push(&apos;1&apos;); //Insurance coverage order  default 1
    aSIUExtendedList.push(&apos;&apos;); //Insurance coverage list
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1policynumber&apos;)); // Primary policy Number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1groupnumber&apos;)); //Promary Policy Group number
    aSIUExtendedList.push(xInput.getString(&apos;ins_planid&apos;)); //Primary Insurance Planid
    aSIUExtendedList.push(xInput.getString(&apos;ins_plancode&apos;)); //Primary Insurance plancode
    aSIUExtendedList.push(xInput.getString(&apos;ins_planname&apos;)); //Plan name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compidprimary&apos;)); //Primary Insurance company ID
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compidprimary&apos;)); //Primary Insurance company ID
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compidprimary&apos;)+&apos;-&apos;+xInput.getString(&apos;siu_in1compnameprimary&apos;)); //Primary insurance company name with ID
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1policynumber&apos;)); // Primary policy Number
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscribermiddlename&apos;)+&apos; &apos;+xInput.getString(&apos;ins_subscriberlastname&apos;)); // Patient name(firstname middilename lastname)
    aSIUExtendedList.push(formatter(&apos;&apos;+xInput.getString(&apos;siu_in1policyholderdob&apos;)+&apos;&apos;,&apos;DOB&apos;)); //Policy Holder DOB
    aSIUExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;ins_subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Gender code
    aSIUExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;ins_subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Gender Name
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1relationship&apos;)); //Relationship code
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1relationship&apos;)); //Relationship description
    aSIUExtendedList.push(&apos;&apos;); //Provider Speciality
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscriberfirstname&apos;)); //Subscriber firstname
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscriberlastname&apos;)); //subscriber lastname
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscribermiddlename&apos;)); //subscriber middle name
    aSIUExtendedList.push(xInput.getString(&apos;ins_subscribertitle&apos;)); //Subscriber Title
    aSIUExtendedList.push(&apos;&apos;); //Billable provider
    aSIUExtendedList.push(&apos;&apos;); //Payer Lookup id
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1policynosecondary&apos;)); //secondary policy number
    aSIUExtendedList.push(xInput.getString(&apos;siu_in1compidsecondary&apos;)); //secondary policy company id
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2subscriberfirstname&apos;)); //seconcodary insurance subscriber firstname
    aSIUExtendedList.push(xInput.getString(&apos;siu_in2subscriberlastname&apos;)); //secondary insurance subscriber lastname
    aSIUExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;siu_in2subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //secondary insurance subscriber gender
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3subscriberfirstname&apos;)); //Tertiary insurance subscriber firstname
    aSIUExtendedList.push(xInput.getString(&apos;siu_in3subscriberlastname&apos;)); //Tertiary insurance subscriber lastname
    aSIUExtendedList.push(catalogueMaps(&apos;&apos;+xInput.getString(&apos;siu_in3subscribergendercode&apos;)+&apos;&apos;, &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Tertiary insurance subscriber gender
    aSIUExtendedList.push(&apos;PharmacyID$@&apos;+xInput.getString(&apos;pid_prefferedpharmacyid&apos;) +&apos;$#&apos;+
    &apos;PharmacyName$@&apos;+xInput.getString(&apos;pid_prefferedpharmacyname&apos;) +&apos;$#&apos;+
    &apos;Address1$@&apos;+xInput.getString(&apos;pid_prefferedpharmacyaddress1&apos;)+&apos;$#&apos;+
    &apos;State$@&apos;+xInput.getString(&apos;pid_prefferedpharmacystate&apos;)+&apos;$#&apos;+
    &apos;City$@&apos;+ xInput.getString(&apos;pid_prefferedpharmacycity&apos;)+&apos;$#&apos;+
    &apos;Zip$@&apos;+xInput.getString(&apos;pid_prefferedpharmacyzip&apos;)+&apos;$#&apos;+
    &apos;Phone$@&apos;+xInput.getString(&apos;pid_prefferedpharmacyphone1&apos;)); // Preferred pharmacy details
    aSIUExtendedList.push(xInput.getString(&apos;siu_pv1attendingdoctorid&apos;)); //Provider NPI
    aSIUExtendedList.push(xInput.getString(&apos;siu_aipreslistname&apos;)); // Provider Listname

    //oParameterList.ExtendedSchedule = aSIUExtendedList;
    xTargetClincalDataset.ExtendedSchedule = formatter(aSIUExtendedList,&apos;parameterlist&apos;);
    oDataSet.ExtendedSchedule = xTargetClincalDataset;

    if (&apos;&apos;+xInput.getString(&apos;problem_migraine&apos;)+&apos;&apos; &gt;0) aSIUAssessementList.push(&apos;Y&apos;); //Migrain value
    else aSIUAssessementList.push(&apos;N&apos;);
    if (xInput.getString(&apos;problem_depressivedisorder&apos;) &gt;0) aSIUAssessementList.push(&apos;Y&apos;); //Depressive disorder value
    else aSIUAssessementList.push(&apos;N&apos;);
    if (xInput.getString(&apos;problem_anxietydisorder&apos;) &gt;0) aSIUAssessementList.push(&apos;Y&apos;); //Anxietydisorder value
    else aSIUAssessementList.push(&apos;N&apos;);
    if (xInput.getString(&apos;problem_bipolardisorder&apos;) &gt;0) aSIUAssessementList.push(&apos;Y&apos;); //Bipolar disorder value
    else aSIUAssessementList.push(&apos;N&apos;);

    //oParameterList.AssessmentSchedule = aSIUAssessementList;
    xTargetClincalDataset.AssessmentSchedule = formatter(aSIUAssessementList,&apos;parameterlist&apos;);
    oDataSet.AssessmentSchedule = xTargetClincalDataset;

    }


    //oDataSet.parameterList = oParameterList; //=oDemographics;
    return oDataSet;
    //.TODO: Add full DataSet for Demographics
    //.TODO: Add Extended DataSet


    }
    case &apos;HL7&apos;:
    {
    messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
    if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()==&quot;S13&quot;)
    {
    msg[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;]=&quot;Reschedule&quot;;
    }
    var statusDetail = validate(msg[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.2&apos;].toString(), msg[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString());
    if(statusDetail.indexOf(&quot;Arrived&quot;) &gt; -1)
    {
    msg[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;]=&quot;COMPLETED VIA PMS&quot;;
    msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]=&quot;S14&quot;;
    }
    msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.9&apos;]=&quot;&quot;;
    aPIDList = new Array(); //Array list for demographics
    msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
    if (msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString() != &apos;&apos;) aPIDList.push(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString()); //PatientID
    else throw &apos;patient ID not found. Aborting.&apos;;
    if (msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() != &apos;&apos;) aPIDList.push(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());//Patient OtherID
    else throw &apos;patient Other ID not found. Aborting.&apos;;
    //aInfo=new Array();
    //aInfo.push(&quot;Patient Information recieved&quot;);

    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString());//Patient First Name
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString());//Patient Midle Name
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString());//Patient Last Name
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString());//Pateint suffix
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString());//Patient address 1
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString());//Patient address 2
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString());//Patient City
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString());//Patient State
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString());//Patient ZIP
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString());//Patient Country
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString());//Patient SSN
    aPIDList.push(catalogueMaps(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));//Patient Gender
    aPIDList.push(formatter(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString(), &apos;DOB&apos;));//Patient DOB
    aPIDList.push(catalogueMaps(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString(), &apos;MARITALSTATUS&apos;,&apos;inboundMaps&apos;));//Patient Marital status
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString());//Patient Home phone
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString());//Patient business phone
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.8&apos;].toString());//patient business phone extension
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString());//Patient email id
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString());//Patient death indicator
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString());//Patient Language
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString());//Patient Account Number
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.9&apos;].toString());//Patient def county
    aPIDList.push(&apos;&apos;);//patient home phone code
    aPIDList.push(&apos;&apos;);//patient business phone code
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString());//Patient race
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString());//Patient ethnic group
    aPIDList.push(&apos;&apos;);//Patient picture
    aPIDList.push(msg[&apos;PID&apos;][&apos;PID.40&apos;][&apos;PID.40.1&apos;].toString());//patient prefered contact
    oParameterList.Demographics = aPIDList;
    //.TODO: Add Extended Demographics Parsing here
    //.TODO :

    if (messageType == &apos;SIU&apos;) {
    aSIUList = new Array();
    aSIUExtendedList=new Array();
    aSIUAssessementList=new Array();
    aSIUList.push(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString()); //PatientID
    aSIUList.push(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()); //Patient OtherID
    if (msg[&apos;SCH&apos;][&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString() != &apos;&apos;) aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString()); //ApptID
    else throw &apos;Appointment ID not found. Aborting.&apos;;
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.2&apos;][&apos;SCH.2.1&apos;].toString()); //SCHFAEntityID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.2&apos;][&apos;SCH.2.2&apos;].toString());//SCHFANamespaceID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.3&apos;][&apos;SCH.3.1&apos;].toString());//SCHOccurenceNo
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.6&apos;][&apos;SCH.6.1&apos;].toString());//SCHEventReasonID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString().replace(&quot;&apos;&quot;,&quot;&apos;&apos;&quot;));//SCHARID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString());//SCHARText
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString());//SCHATQStartDatetime
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.5&apos;].toString());//SCHATQEndDatetime
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.6&apos;].toString());//SCHATQPriority
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.1&apos;].toString());//SCHPCPID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.2&apos;].toString());//SCHPCPFamilyName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.3&apos;].toString());//SCHPCPGivenName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.4&apos;].toString());//SCHPCPSecondName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.5&apos;].toString());//SCHPCPSuffix
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.12&apos;][&apos;SCH.12.6&apos;].toString());//SCHPCPPrefix
    aSIUList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString());//SCHPCLPointOfCare
    aSIUList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString());//SCHPCLLocationDescription
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.16&apos;][&apos;SCH.16.1&apos;].toString());//SCHFCPID
    aSIUList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString());//SCHFCLPointOfCare
    aSIUList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString());//SCHFCLLocationDescription
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.1&apos;].toString());//SCHEnteredByPersonID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString());//SCHFillerStatusCodeID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.6&apos;][&apos;SCH.6.2&apos;].toString());//SCHEventReasonText
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString());//SCHAppointmentTypeCode
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString());//SCHAppointmentTypeText
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString());//schplacerappointmentid
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.1&apos;][&apos;SCH.1.2&apos;].toString());//Name space ID
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString());//Appointment duration
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.10&apos;][&apos;SCH.10.1&apos;].toString());//Appointment duration units
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.16&apos;][&apos;SCH.16.2&apos;].toString());//schfcpfamilyname
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.16&apos;][&apos;SCH.16.3&apos;].toString());//SCHFCPGivenName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.16&apos;][&apos;SCH.16.4&apos;].toString());//SCHFCPSecondName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.2&apos;].toString());//SCHEBPFamilyName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.3&apos;].toString());//SCHEBPGivenName
    aSIUList.push(msg[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.4&apos;].toString());//SCHEBPSecondName
    for each (seg in msg..NTE)
    {
    if(seg[&apos;NTE.2&apos;][&apos;NTE.2.1&apos;].toString().toLowerCase()==&quot;appointment notes&quot;)
    {
    aSIUList.push(seg[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toString());//SCHExamInstructions
    break;
    }
    }
    //logger.info(aSIUList);
    // oParameterList.Schedule = aSIUList;
    xTargetClincalDataset.Schedule = formatter(aSIUList,&apos;parameterlist&apos;);
    oDataSet.Schedule = xTargetClincalDataset;
    aSIUExtendedList.push(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString()); //PatientID
    aSIUExtendedList.push(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()); //Patient OtherID
    aSIUExtendedList.push(msg[&apos;SCH&apos;][&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString()); //ApptID
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()); //SIU_PV1PatientClass
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.1&apos;].toString());//SIU_PV1ADID
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.2&apos;].toString()); //Provider LastName
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.3&apos;].toString()); //Provider FirstName
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.4&apos;].toString()); //Provider Middle name
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.5&apos;].toString()); //Provider Suffix
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.6&apos;].toString()); //Provider Prefix
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString()); //AmbulatoryStatus
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.18&apos;][&apos;PV1.18.1&apos;].toString()); //PatientType
    aSIUExtendedList.push(&apos;&apos;); //Observation Value
    aSIUExtendedList.push(&apos;&apos;); //Observation Units
    aSIUExtendedList.push(msg[&apos;SCH&apos;][&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString()); //Exam code
    aSIUExtendedList.push(msg[&apos;SCH&apos;][&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString()); //Exam Description
    aSIUExtendedList.push(&apos;Department&apos;); //PointofCare
    aSIUExtendedList.push(&apos;Department&apos;); //Description
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()); //Location
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString()); //Room
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString()); //Bed
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString()); //EncounterID
    aSIUExtendedList.push(&apos;&apos;); //Height
    aSIUExtendedList.push(&apos;&apos;); //Height Units
    aSIUExtendedList.push(&apos;&apos;); //Account Number1
    aSIUExtendedList.push(&apos;&apos;); //Account Number2
    aSIUExtendedList.push(&apos;&apos;); //Billing 1
    aSIUExtendedList.push(&apos;&apos;); //Billing 2
    aSIUExtendedList.push(&apos;&apos;); //Scanner Available 1
    aSIUExtendedList.push(&apos;&apos;); //Scanner avialable 2
    aSIUExtendedList.push(&apos;&apos;); //BUN/CR 1
    aSIUExtendedList.push(&apos;&apos;); //BUN/CR 2
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.6&apos;].toString()); //Referring DocID
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.7&apos;].toString()); //Referring Doctor LastName
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.8&apos;].toString()); //Referring Doctor FirstName
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.9&apos;].toString()); //Referring Doctor MiddleName
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.1&apos;].toString()); //Resource Doctor ID
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.2&apos;].toString()); //Resource Doctor LastName
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.3&apos;].toString()); //Resource Doctor FirstName
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.4&apos;].toString()); //Resource Doctor MiddleName
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()); //Location Type Code
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString()); //Location Type Text
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()); //Location Id
    aSIUExtendedList.push(&apos;&apos;); //Pregnant flag
    aSIUExtendedList.push(&apos;&apos;); //Valaue
    aSIUExtendedList.push(&apos;&apos;);//Primary Insurance policy number
    aSIUExtendedList.push(&apos;&apos;);//Company ID
    aSIUExtendedList.push(&apos;&apos;);//Company Name
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.12&apos;][&apos;IN1.12.1&apos;].toString());//Primary insurance start date
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.13&apos;][&apos;IN1.13.1&apos;].toString());//primary insurance expairy date
    aSIUExtendedList.push(&apos;&apos;);//Scondary insurance policy number
    aSIUExtendedList.push(&apos;&apos;);//Company id
    aSIUExtendedList.push(&apos;&apos;);//company name
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.12&apos;][&apos;IN2.12.1&apos;].toString());//secondary insurance start date
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.13&apos;][&apos;IN2.13.1&apos;].toString());//secondary insurance end date
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.47&apos;][&apos;PV1.47.1&apos;].toString()); //Insurance Copay
    aSIUExtendedList.push(&apos;&apos;); //General Pay
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.46&apos;][&apos;PV1.46.1&apos;].toString()); //Patient Balance
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.3&apos;][&apos;IN1.3.1&apos;].toString()+&apos;-&apos;+msg[&apos;IN1&apos;][0][&apos;IN1.4&apos;][&apos;IN1.4.1&apos;].toString()); //Primary insurance company name with ID
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.7&apos;][&apos;IN1.7.6&apos;].toString() + msg[&apos;IN1&apos;][0][&apos;IN1.7&apos;][&apos;IN1.7.7&apos;].toString()); //Phone number
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.2&apos;].toString() + &apos; &apos; + msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.3&apos;].toString() + &apos; &apos; + msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.1&apos;].toString()); // Patient name(firstname middilename lastname)
    aSIUExtendedList.push(formatter(msg[&apos;IN1&apos;][0][&apos;IN1.18&apos;][&apos;IN1.18.1&apos;].toString(),&apos;DOB&apos;)); //Policy Holder DOB
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString()); // Primary policy Number
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString()); //Promary Policy Group number
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString()); //relationship
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.4&apos;][&apos;IN2.4.1&apos;].toString()); // Secondary Insurance company name
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.7&apos;][&apos;IN2.7.6&apos;].toString() + msg[&apos;IN2&apos;][0][&apos;IN2.7&apos;][&apos;IN2.7.7&apos;].toString()); //Phone number
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.16&apos;][&apos;IN2.16.2&apos;].toString() + &apos; &apos; + msg[&apos;IN2&apos;][0][&apos;IN2.16&apos;][&apos;IN2.16.3&apos;].toString() + &apos; &apos; + msg[&apos;IN2&apos;][0][&apos;IN2.16&apos;][&apos;IN2.16.1&apos;].toString()); //
    aSIUExtendedList.push(formatter(msg[&apos;IN2&apos;][0][&apos;IN2.18&apos;][&apos;IN2.18.1&apos;].toString(),&apos;DOB&apos;)); //DOB
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.36&apos;][&apos;IN2.36.1&apos;].toString()); //secondary insurance policy number
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.8&apos;][&apos;IN2.8.1&apos;].toString()); //Secondary insurance group number
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.17&apos;][&apos;IN2.17.1&apos;].toString()); //Relationship
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.4&apos;][&apos;IN3.4.1&apos;].toString()); //Tertiary Insurance company name
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.7&apos;][&apos;IN3.7.6&apos;].toString() + msg[&apos;IN3&apos;][0][&apos;IN3.7&apos;][&apos;IN3.7.7&apos;].toString()); //Phone number
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.16&apos;][&apos;IN3.16.2&apos;].toString() + &apos; &apos; + msg[&apos;IN3&apos;][0][&apos;IN3.16&apos;][&apos;IN3.16.3&apos;].toString() + &apos; &apos; + msg[&apos;IN3&apos;][0][&apos;IN3.16&apos;][&apos;IN3.16.1&apos;].toString()); //Policy holder name
    aSIUExtendedList.push(formatter(msg[&apos;IN3&apos;][0][&apos;IN3.18&apos;][&apos;IN3.18.1&apos;].toString(),&apos;DOB&apos;)); //DOB
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.36&apos;][&apos;IN3.36.1&apos;].toString()); //Policy number
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.8&apos;][&apos;IN3.8.1&apos;].toString()); //group number
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.17&apos;][&apos;IN3.17.1&apos;].toString()); //Relationship
    aSIUExtendedList.push(&apos;&apos;); //Payment Collected
    aSIUExtendedList.push(&apos;1&apos;); //Insurance coverage order  default 1
    aSIUExtendedList.push(&apos;&apos;); //Insurance coverage list
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString()); // Primary policy Number
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString()); //Promary Policy Group number
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.2&apos;][&apos;IN1.2.1&apos;].toString()); //Primary Insurance Planid
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.2&apos;][&apos;IN1.2.4&apos;].toString()); //Primary Insurance plancode
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.2&apos;][&apos;IN1.2.2&apos;].toString()); //Plan name
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.3&apos;][&apos;IN1.3.1&apos;].toString()); //Primary Insurance company ID
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.3&apos;][&apos;IN1.3.1&apos;].toString()); //Primary Insurance company ID
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.3&apos;][&apos;IN1.3.1&apos;].toString()+&apos;-&apos;+msg[&apos;IN1&apos;][0][&apos;IN1.4&apos;][&apos;IN1.4.1&apos;].toString()); //Primary insurance company name with ID
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString()); // Primary policy Number
    aSIUExtendedList.push( msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.2&apos;].toString() + &apos; &apos; + msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.3&apos;].toString() + &apos; &apos; + msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.1&apos;].toString()); // Patient name(firstname middilename lastname)
    aSIUExtendedList.push(formatter(msg[&apos;IN1&apos;][0][&apos;IN1.18&apos;][&apos;IN1.18.1&apos;].toString(),&apos;DOB&apos;)); //Policy Holder DOB
    aSIUExtendedList.push(catalogueMaps(msg[&apos;IN1&apos;][0][&apos;IN1.43&apos;][&apos;IN1.43.1&apos;].toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Gender code
    aSIUExtendedList.push(catalogueMaps(msg[&apos;IN1&apos;][0][&apos;IN1.43&apos;][&apos;IN1.43.2&apos;].toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Gender Name
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString()); //Relationship code
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString()); //Relationship description
    aSIUExtendedList.push(&apos;&apos;); //Provider Speciality
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.2&apos;].toString()); //Subscriber firstname
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.1&apos;].toString()); //subscriber lastname
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.3&apos;].toString()); //subscriber middle name
    aSIUExtendedList.push(msg[&apos;IN1&apos;][0][&apos;IN1.16&apos;][&apos;IN1.16.5&apos;].toString()); //Subscriber Title
    aSIUExtendedList.push(&apos;&apos;); //Billable provider
    aSIUExtendedList.push(&apos;&apos;); //Payer Lookup id
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.36&apos;][&apos;IN2.36.1&apos;].toString()); //secondary policy number
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.3&apos;][&apos;IN2.3.1&apos;].toString()); //secondary policy company id
    aSIUExtendedList.push(msg[&apos;IN2&apos;][0][&apos;IN2.16&apos;][&apos;IN2.16.2&apos;].toString()); //seconcodary insurance subscriber firstname
    aSIUExtendedList.push( msg[&apos;IN2&apos;][0][&apos;IN2.16&apos;][&apos;IN2.16.1&apos;].toString()); //secondary insurance subscriber lastname
    aSIUExtendedList.push(catalogueMaps(msg[&apos;IN2&apos;][0][&apos;IN2.43&apos;][&apos;IN2.43.1&apos;].toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //secondary insurance subscriber gender
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.16&apos;][&apos;IN3.16.2&apos;].toString()); //Tertiary insurance subscriber firstname
    aSIUExtendedList.push(msg[&apos;IN3&apos;][0][&apos;IN3.16&apos;][&apos;IN3.16.1&apos;].toString()); //Tertiary insurance subscriber lastname
    aSIUExtendedList.push(catalogueMaps(msg[&apos;IN3&apos;][0][&apos;IN3.43&apos;][&apos;IN3.43.1&apos;].toString(), &apos;GENDER&apos;,&apos;inboundMaps&apos;));  //Tertiary insurance subscriber gender
    aSIUExtendedList.push(&apos;&apos;); // Preferred pharmacy details
    aSIUExtendedList.push(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString()); //Provider NPI
    aSIUExtendedList.push(msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.7&apos;].toString()); // Provider Listname
    var segCount=0
    for each (seg in msg..NTE)
    {
    	
    if(seg[&apos;NTE.2&apos;][&apos;NTE.2.1&apos;].toString().toLowerCase()==&quot;appointment notes&quot;)
    {
    segCount=	segCount+1;
    aSIUExtendedList.push(seg[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toString());//SIU_AppointmentComments
    break;
    }
   
    }
    if(segCount==0)
    {
    	aSIUExtendedList.push(&apos;&apos;);
    }

    //oParameterList.ExtendedSchedule = aSIUExtendedList;
    xTargetClincalDataset.ExtendedSchedule = formatter(aSIUExtendedList,&apos;parameterlist&apos;);
    oDataSet.ExtendedSchedule = xTargetClincalDataset;


    aSIUAssessementList.push(&apos;&apos;);
    aSIUAssessementList.push(&apos;&apos;);
    aSIUAssessementList.push(&apos;&apos;);
    aSIUAssessementList.push(&apos;&apos;);

    //oParameterList.AssessmentSchedule = aSIUAssessementList;
    xTargetClincalDataset.AssessmentSchedule = formatter(aSIUAssessementList,&apos;parameterlist&apos;);
    oDataSet.AssessmentSchedule = xTargetClincalDataset;
    }


    xTargetClincalDataset.Demographics = formatter( aPIDList,&apos;parameterlist&apos;);
    oDataSet.Demographics = xTargetClincalDataset;
    oDataSet.info = &quot;Patient Demographics Info processed. \n&quot;;



    return oDataSet;
    }



    }



    }
  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.3.0">
            <id>ac9d7d29-32fb-4ac2-baac-f43add7529c4</id>
            <name>SetNotification</name>
            <revision>1</revision>
            <lastModified>
              <time>1689431658634</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Initiate notification variables

	@param {Any} inputChannelName - 
	@param {Any} exception - 
	@return {String} return description
*/
function SetNotification(inputChannelName, exception) {

    channelName = &quot;&quot; +inputChannelName+ &quot;&quot;;
    exception=&quot;&quot;+exception+&quot;&quot;;
    if (exception.indexOf(&quot;java.sql.SQLException: Network error IOException: Connection timed out: connect&quot;) != -1)
    {
    	  globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_DBReadException&quot;,&quot;Exception from &quot;+channelName +&quot; Channel : &quot; + exception);
    }
     
   else if (exception.indexOf(&quot;Connection refused: connect&quot;) != -1 || exception.indexOf(&quot;SocketTimeoutException: connect timed out&quot;) != -1)
    {
    	 
    	  globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_LLPSenderException&quot;,&quot;Exception from &quot;+channelName +&quot; Channel : &quot; + exception);
    	  
    }
    else if(exception.indexOf(&quot;fle not found&quot;) != -1)
    {
    
    	globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_FileReaderException&quot;,&quot;Exception from &quot;+channelName +&quot; Channel : &quot; + exception);
    
    } 
    else if(exception.indexOf(&quot;Error evaluating Database Writer&quot;) != -1 || exception.indexOf(&quot;No suitable driver found&quot;) != -1)
    {
    	 globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_DBWriteException&quot;,&quot;Exception from &quot;+channelName +&quot; Channel : &quot; +  exception);
    }
    else if(exception.indexOf(&quot;Error writing file&quot;) != -1)
    {
    	 globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_FileWriterException&quot;,&quot;Exception from &quot;+channelName +&quot; Channel : &quot; +  exception);
    }
      else {
      	  logger .info(&quot;Exception from &quot;+channelName +&quot; Channel : &quot; +  exception);
       
        //globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_LLPListenerException&quot;,&quot;Exception from &quot;+channelName.split(&quot;_&quot;)[1] + &quot; &quot; + channelName.split(&quot;_&quot;)[2] +&quot; : &quot; + exception);
        
        
        //globalMap.put(channelName.split(&quot;_&quot;)[1] + &quot;_&quot; + channelName.split(&quot;_&quot;)[2] + &quot;_ODBCScriptReaderException&quot;,&quot;Exception from &quot;+channelName.split(&quot;_&quot;)[1] + &quot; &quot; + channelName.split(&quot;_&quot;)[2] +&quot; : &quot; + exception);
    }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>